<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
  <title>Tutorial: Database Persistence</title>
  <meta content="text/html; charset=windows-1252"
 http-equiv="Content-Type">
  <link href="../phpdoc.css" rel="stylesheet" type="text/css">
</head>
<body style="background-color: rgb(255, 255, 255);">
<h3>RDF API for PHP </h3>
<h1>Tutorial: Database Persistence</h1>
<p>This turorial is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<br>
<p>Radoslaw Oldakowski &lt;<a href="mailto:radol@gmx.de">radol@gmx.de</a>&gt;
<br>
October 2004</p>
<p>&nbsp;</p>
<p>In this tutorial I will demonstrate how to use the new developed
database backend within RAP by giving some examples of setting the
database connection, as well as creating, retrieving, and manipulating
persistent models. </p>
<p>&nbsp;</p>
<h3>Introduction</h3>
<p>The database backend for RAP V0.9.1 consists of two classes <code>DbStore</code>
and <code>DbModel</code>. The former is used to set the database
connection as well as create and retrieve persistent models (DbModels).
The latter provides methods for manipulating these models. There is
also a parent class <code>Model</code> with some general functions
common for both <code>MemModel</code> and <code>DbModel</code>. </p>
<p>&nbsp;</p>
<h3>First Steps - Setting the Database Connection and Creating Tables</h3>
<p>RDF API for PHP V0.9.1 supports a great variety of different databases
(see ADODB supported
databases) . Moreover, RAP allows connecting to multiple databases
at the same time. Every database containing RDF data is represented by
an instance of class <code>DbStore</code>. We can create this object
by simply passing all connection parameters to the constructor
function. For example, if we want to use MySQL, we will set the
connection as shown below:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $mysql_database =  ModelFactory::getDbStore('MySQL', 'host',
'db_name', 'user_name', 'password');</code></p>      </td>
    </tr>
  </tbody>
</table>
<p>The parameters to be passed represent the database driver, host
name, database name, user name, and password respectively, reflecting
our own connection settings. Similarly, we can connect to other
databases, for instance Oracle:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $oracle_database =  ModelFactory::getDbStore('Oracle', FALSE,
'db_name', 'username', 'password'); </code></p>      </td>
    </tr>
  </tbody>
</table>
<p>In case that we are using the same type of database all the time, we
can also define the connection parameters as the default setting in
Section <code>Database</code> of the file <code>constants.php</code>.
For instance, if we use MsAccess via ODBC, with <code>RDF_DB</code> as
system DSN, and we do not need any username or password to connect to
our database, we will define the connection constants as follows:</p>
<b>constants.php</b>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> //
----------------------------------------------------------------------<br>
// Database<br>
//
----------------------------------------------------------------------<br>
define("ADODB_DB_DRIVER", "ODBC");<br>
define("ADODB_DB_HOST", "RDF_DB");<br>
define("ADODB_DB_NAME", "");<br>
define("ADODB_DB_USER", "");<br>
define("ADODB_DB_PASSWORD", "");</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p>Subsequently we can connect to our database using these settings as
default parameters:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $access_database =   ModelFactory::getDbStore();</code></p>      </td>
    </tr>
  </tbody>
</table>
<p>When using RAP's database backend for the very first time, we must
additionally create appropriate tables, in order to be able to store
RDF models. RAP provides a very useful method <code>createTable()</code>
which will automatically create all tables and indexes needed. We only
have to specify the type of the database we are using:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $access_database-&gt;createTables('MsAccess');<br>
$mysql_database-&gt;createTables('MySQL');</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p>Unfortunately, currently this method only supports MsAccess and
MySQL. Thus, if we want to use other databases (for instance Oracle, we
have connected to in this tutorial) we will have to create all required
tables and indexes manually by ourselves according to the abstract <a
 href="../database_schema.html"> database schema</a> provided with the
API documentation. </p>
<p>&nbsp;</p>
<h3>Creating and Retrieving DbModels</h3>
<p>In RDF API for PHP V0.9.1 every persistent model (DbModel) is given a
unique URI (<i>modelURI</i>) to differentiate it from other models.
Thus, when creating a new DbModel or retrieving an existing one, we
have to specify its modelURI. For example, we can create a new, empty
DbModel in the Access database from the previous section by calling the
method <code>getNewModel()</code> on the database object and passing
the modelURI as parameter:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $modelURI =
"http://somewhere.edu/rap-v-06/tutorial/DbModel1";<br>
$dbModel1 = $access_database-&gt;getNewModel($modelURI);</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p> If we defined the connection parameters in constants.php, we can get an default DbModel without manualy creating an DbStore object before. If the model with the given base URI does exist in the database, it will be opened. If not, it will be created.</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
        <p><code> $modelURI = "http://somewhere.edu/rap-v-06/tutorial/DbModel1";<br>
      $dbModel1 = ModelFactory::getDefaultDbModel($modelURI);</code></p></td>
    </tr>
  </tbody>
</table>
<p>Note that <code>getNewModel()</code> will return <code>FALSE</code>
if a DbModel with the same modelURI already exists. Therefore, if you
are in doubt, it is highly recommended to use the method <code>modelExists()</code>
to check the URI to be assigned, prior to calling <code>getNewModel()</code>.
Accordingly, we can modify the above code as follows:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $modelURI =
"http://somewhere.edu/rap-v-06/tutorial/DbModel1";</code></p>
      <p><code>if ($access_database-&gt;modelExists($modelURI)) <br>
&nbsp;&nbsp;&nbsp;echo "WARNING! DbModel with the same URI: '$modelURI'
already exists"; <br>
else<br>
&nbsp;&nbsp;&nbsp;$dbModel1 =
$access_database-&gt;getNewModel($modelURI);</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p>Trying to use an existing modelURI will consequently cause a warning
notice.</p>
<p>It often happens that we not only need to create a completely new
DbModel but moreover want to store an in-memory model or even a
persistent model from another database. For this purpose we can use the
method <code>putModel()</code>. To demonstrate this we initially
generate a new MemModel from an RDF document (<a href="../example1.rdf">example1.rdf</a>):</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> // Create a new memory model<br>
$memModel = ModelFactory::getDefaultModel();</code></p>
      <p><code>// Load and parse document<br>
$memModel-&gt;load("example1.rdf");</code></p>      </td>
    </tr>
  </tbody>
</table>
<p>and then we pass the object <code>$memModel</code> just created,
together with the modelURI we want to assign it, to the method <code>putModel()</code>:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $modelURI =
"http://somewhere.edu/rap-v-06/tutorial/DbModel2";<br>
$access_database-&gt;putModel($memModel, $modelURI);</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p>To list all models persistently stored in the database RAP provides
the method <code>listModels()</code> which returns an array with
modelURI and baseURI of every DbModel. Using this function we can, for
instance, print out the contents of the database created in this
tutorial:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> // get the list with modelURI and baseURI of all
DbModels<br>
$list = $access_database-&gt;listModels();</code></p>
      <p><code>// print out the database contents<br>
foreach ($list as $model) {<br>
&nbsp;&nbsp;&nbsp;echo "modelURI: " .$model['modelURI'] ."&lt;BR&gt;";<br>
&nbsp;&nbsp;&nbsp;echo "baseURI : " .$model['baseURI']
."&lt;BR&gt;&lt;BR&gt;";<br>
}</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p>This will result in the following output:</p>
<b>Output:</b>
<table border="1" cellpadding="10" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td> modelURI: http://somewhere.edu/rap-v-06/tutorial/DbModel1<br>
baseURI :
      <p>modelURI: http://somewhere.edu/rap-v-06/tutorial/DbModel2<br>
baseURI : http://www.w3.org/Home/Lassila.rdf#</p>
      </td>
    </tr>
  </tbody>
</table>
<p>Note that we have not indicated any baseURI for the first model
listed above. We could have done it by passing the baseURI as the
second parameter to the method <code>getNewModel()</code>. In the case
of the next model, the baseURI comes from the original MemModel saved
by using the function <code>putModel()</code>.</p>
<p>Retrieving a persistent RDF model is also very easy. We simply call
the method <code>getModel()</code> on a database object and indicate
the URI of the DbModel to be accessed, as shown below:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
      <p><code> $modelURI =
"http://somewhere.edu/rap-v-06/tutorial/DbModel2";<br>
$DbModel2 = $access_database-&gt;getModel($modelURI);</code></p>
      </td>
    </tr>
  </tbody>
</table>
<p><code>getModel()</code> returns an object <code>DbModel</code> or <code>FALSE</code>
if the modelURI was not found.</p>
<p>&nbsp;</p>
<h3>Manipulating a DbModel</h3>
<p>Once we have created an instance of DbModel, we can manipulate it,
i.e. add, remove, or replace statements, serialize the model into
different formats (plain text, RDF/XML, N3), save it to file or output
in a browser window, compare and combine it with other MemModels or
DbModels, reify, or query it. For this purpose RDF API for PHP allows
us to use the same method names as in the case of manipulating a
MemModel (see tutorial <a href="usingtheModelAPI.htm">getting started</a>).
Therefore, it is not necessary to repeat them once again. Although the
internal implementation of these methods differs from those of the
class <code>MemModel</code>, all the differences are hidden for the
user. Hence, one can expect the same results while manipulating RDF
models regardless of the storage mechanism chosen.</p>
<p>Though, there are two methods specific only for DbModels, namely: <code>delete()</code>
removing a persistent model from database and <code>getMemModel()</code>
which loads a DbModel (including all statements) into a memory model.
Remember also that the Statement Iterator (<code>getStatementIterator()</code>)
is not accessible for instances of DbModel, likewise the indexing
method (<code>index()</code>). The latter, because RAP makes use of
database internal indexing capabilities. All the other features
described in the introductory tutorial <a href="usingtheModelAPI.htm">getting
started</a> are common for both classes <code>MemModel</code> and <code>DbModel</code>.</p>
</body>
</html>
