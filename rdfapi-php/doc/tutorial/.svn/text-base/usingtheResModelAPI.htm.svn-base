<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Using RAP's Resource-Centric ResModel API</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<LINK href="../phpdoc.css" rel=stylesheet type=text/css>
</HEAD>
<BODY bgcolor="#FFFFFF">

<H3>RDF API for PHP </H3>
<h1> Using RAP's Resource-Centric ResModel API </h1>
<p>This turorial is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<p><a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/daniel_westphal.htm" target="_blank">Daniel Westphal</a>, <a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/chris_bizer.htm" target="_blank">Chris Bizer</a><br>
October 2004</p>
<p>This tutorial is based on the <a href="http://jena.sourceforge.net/tutorial/RDF_API/" target="_blank">Jena 
  tutorial</a> by <em>Brian McBride</em>,<em> Daniel Boothby and Chris Dollin.</em></p>
<h2>Table of Contents </h2>
<ol>
  <li><a href="#ch-Introduction">Introduction </a></li>
  <li><a href="#navigating">Navigating a Model </a></li>
  <li><a href="#querying_a_model">Querying a Model </a></li>
  <li><a href="#ch-Containers">Containers </a></li>
</ol>
<p>&nbsp;</p>
<h2><a name="ch-Introduction">Introduction </a></h2>
<p>RAP offers two different programming interfaces for manipulating RDF graphs: 
  The statement-centric <strong>Model API</strong> which allows you to manipulate 
  an RDF graph as a set of statements; and the resource-centric <strong>ResModel 
  API</strong> for manipulating an RDF graph as a set of resources having properties. 
  The ResModel API is very similar to the <a href="http://jena.sourceforge.net/" target="_blank">Jena 
  Model API</a> allowing programmers, which are used to Jena, to easily write 
  RAP code. </p>
<p>The ResModel API is implemented on top of the Model API. ResModels are always 
  having a underlying MemModel, DbModel, InfModelF or InfModelB and are only providing 
  a resource-centric view on this model. Each method call is translated into a 
  find()-, add()-, or remove()-call to the underlying model. Thus using ResModel 
  is slightly slower than using the underlying model directly.</p>
<p> <img src="img/resmodel.png" width="324" height="343" /></p>
<p>RDF is a W3C standard for describing resources. What is a resource? That is 
  rather a deep question and the precise definition is still the subject of debate. 
  For our purposes we can think of it as anything we can identify. You are a resource, 
  as is your home page, this tutorial, the number one and the great white whale 
  in Moby Dick. </p>
<p>Our examples in this tutorial will be about people. They use an <a href="http://www.w3.org/TR/vcard-rdf" target="_blank">RDF representation of VCARDS </a>. RDF is best thought of in the form of node and arc diagrams. A simple vcard might look like this in RDF: </p>
<p align="center"><img src="img/fig1.png" alt="figure 1" height="180" width="240"></p>
<p>The <em>resource </em>, John Smith, is shown as 
  an ellipse and is identified by a Uniform Resource Identifier (URI), in this 
  case "http://.../JohnSmith".<br>
  Resources have <em>properties</em>. In these examples 
  we are interested in the sort of properties that would appear on John Smith's 
  business card. The figure above shows only one property, John Smith's full name. 
  A property is represented by an arc, labeled with the name of a property. The 
  name of a property is also a URI, but as URI's are rather long and cumbersome, 
  the diagram shows it in XML qname form. Each property has a value. In this case 
  the value is a <em>literal</em>, which for now we 
can think of as a strings of characters. Literals are shown in rectangles. </p>
<p> In RAP, the classes representing resources, properties and literals are called 
  ResResource, ResProperty and ResLiteral. The code below creates John's VCard 
  using the ResModel API:: </p>
<p>&nbsp;</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>//change the RDFAPI_INCLUDE_DIR to your local settings<br>
        define(&quot;RDFAPI_INCLUDE_DIR&quot;, &quot;C:/!htdocs/rdfapi-php/api/&quot;); <br>
        include(RDFAPI_INCLUDE_DIR . &quot;RdfAPI.php&quot;);</p>
        <p>// Some definitions<br>
          define('VCARD_NS', 'http://www.w3.org/2001/vcard-rdf/3.0#');<br>
          $personURI = &quot;http://somewhere/JohnSmith&quot;;<br>
          $fullName = &quot;John Smith&quot;;</p>
        <p>// Create an empty Model <br>
          $model = ModelFactory::getResModel(MEMMODEL); </p>
        <p>// Create the resources<br>
          $fullNameLiteral = $model-&gt;createLiteral($fullName);<br>
          $johnSmith = $model-&gt;createResource($personURI);<br>
          $vcard_FN= $model-&gt;createProperty(VCARD_NS.'FN');<br>
          $vcard_NICKNAME= $model-&gt;createProperty(VCARD_NS.'NICKNAME');</p>
        <p>// Add the property <br>
      $johnSmith-&gt;addProperty($vcard_FN, $fullNameLiteral); </p></td>
    </tr>
  </tbody>
</table>
<p>The code begins with some constant definitions and then creates an empty model, 
  using the ModelFactory method getResModel(MEMMODEL) to create a ResModel 
  using a underlying MemModel. RAP also contains other implementations of models, 
  e.g. one which uses a relational database, or models that support RDFS reasoning 
  mechanisms; these types of Model are also available from the ModelFactory.</p>
<h2><a name="navigating" id="navigating">Navigating a Model </a></h2>
<p>Given the URI of a resource, the resource object can be retrieved from a model 
  using the $model-&gt;createResource($uri) method. This method is defined to 
  return a ResResource object if one exists in the model, or otherwise to create 
  a new one. Example: Retrieve the John Smith resource from the model: </p>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// Retrieve the John Smith vcard resource from the model <br>
      $vCard = $model-&gt;createResource($personURI);</p>      </td>
    </tr>
  </tbody>
</table>
<p>The ResResource interface defines a number of methods for accessing the properties 
  of a resource. The $resource-&gt;getProperty($property) method accesses a property 
  of the resource. The type of the object returned is Statement, not the Property 
  as you might expect. Returning the whole statement allows the application to 
  access the value of the property using one of its accessor methods which return 
  the object of the statement. Example: Retrieve the value of the FN property: 
</p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// Retrieve the value of the FN property <br>
        $statement = $vCard-&gt;getProperty($vcard_FN);<br>
      $value = $statement-&gt;getObject(); </p></td>
    </tr>
  </tbody>
</table>
<p>In this example, the vcard resource has only one vcard:FN property. RDF permits 
  a resource to have several properties of the same name; for example Adam might 
  have more than one nickname. Let's give him two: </p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// Add two nickname properties to vcard<br>
        $literal1 = $model-&gt;createLiteral(&quot;Smithy&quot;);<br>
        $literal2 = $model-&gt;createLiteral(&quot;Adman&quot;); <br>
        $vCard-&gt;addProperty($vcard_NICKNAME, $literal1);<br>
      $vCard-&gt;addProperty($vcard_NICKNAME, $literal2); </p></td>
    </tr>
  </tbody>
</table>
<p>Calling $vcard-&gt;getProperty(VCARD.NICKNAME) will return one of the values, 
  but it is indeterminate which one. So if it is possible that a property might 
  occur more than once, then the $resource-&gt;listProperties($property) method 
  has to be used to get an array containing all statements with this resource and property:</p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// List the nicknames<br>
        echo '&lt;b&gt;Known nicknames for '.$fullNameLiteral-&gt;getLabel().':&lt;/b&gt;&lt;BR&gt;';<br>
        foreach ($vCard-&gt;listProperties($vcard_NICKNAME) as $currentResource) <br>
        { <br>
&nbsp;&nbsp;&nbsp;&nbsp;echo $currentResource-&gt;getLabelObject().'&lt;BR&gt;';<br>
}; </p></td>
    </tr>
  </tbody>
</table>
<p>&nbsp;</p>
<h2><a name="querying_a_model" id="querying_a_model">Querying a Model </a></h2>
<p>The previous section dealt with the case of navigating a model from a resource 
  with a known URI. This section deals with searching a model. RAP's ResModel 
  API only supports a limited query primitive. More powerful query facilities 
  are provided through the RDQL query language which is described in a <a href="rdql_tutorial.htm">separate 
  tutorial</a>. </p>
<p>$model-&gt;listSubjects() returns an iterator over all resources that have 
  properties, <em>ie </em> are the subject of some statement. $model-&gt;listSubjectsWithProperty($property, 
  $value) will return an iterator over all the resources which have a property 
  $property with value $value. </p>
<p>Example: Iterate over all vcards which having FN property:</p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// Iterate over all vcards which having FN property<br>
          $iter = $model-&gt;listSubjectsWithProperty(new ResResource(VCARD_NS.'FN')); 
          <br>
          for ($iter-&gt;rewind(); $iter-&gt;valid(); $iter-&gt;next())<br>
          {<br>
          &nbsp;&nbsp;&nbsp;&nbsp;$currentResource=$iter-&gt;current();<br>
          }; </p></td>
    </tr>
  </tbody>
</table>
<h2><a name="ch-Containers">Containers </a></h2>
<p>RDF defines a special kind of resources for representing collections of things. 
  These resources are called <em>containers</em>. The members of a container can 
  be either literals or resources. There are three kinds of container: </p>
<ul>
  <li>a BAG is an unordered collection </li>
  <li>an ALT is an unordered collection intended to represent alternatives </li>
  <li>a SEQ is an ordered collection </li>
</ul>
<p>A container is represented by a resource. That resource will have an rdf:type property whose value should be one of rdf:Bag, rdf:Alt or rdf:Seq, or a subclass of one of these, depending on the type of the container. The first member of the container is the value of the container's rdf:_1 property; the second member of the container is the value of the container's rdf:_2 property and so on. The rdf:_nnn properties are known as the <em>ordinal properties </em>. </p>
<p>For example, the Model for a simple bag containing the vcards of the Smith's might look like this: </p>
<p align="center"><img src="img/fig3.png" alt="figure 3" height="420" width="720"></p>
<p align="left">Whilst the members of the bag are represented by the properties rdf:_1, rdf:_2 etc the ordering of the properties is not significant. We could switch the values of the rdf:_1 and rdf:_2 properties and the resulting Model would represent the same information. </p>
<p align="left">Whilst containers can be handled using the basic machinery of 
  resources and properties, RAP has explicit implementation classes to handle 
  them. <br>
</p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// Create a bag <br>
        $bag_smiths = $model-&gt;createBag(); </p>
        <p>$beckySmith = $model-&gt;createResource('http://somewhere/BeckySmith');<br>
          $beckySmithFN = $model-&gt;createLiteral('Becky Smith');<br>
          $beckySmith-&gt;addProperty($vcard_FN,$beckySmithFN );</p>
        <p>// Add persons to bag<br>
          $bag_smiths-&gt;add($beckySmith);<br>
      $bag_smiths-&gt;add($johnSmith);</p></td>
    </tr>
  </tbody>
</table>
<p align="left">If we serialize this Model, you'll get something like this: </p>
&lt;rdf:Description rdf:nodeID="A3"&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:type rdf:resource='http://www.w3.org/1999/02/22-rdf-syntax-ns#Bag'/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:_1 rdf:resource='http://somewhere/BeckySmith'/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:_2 rdf:resource='http://somewhere/JohnSmith'/&gt; <br>
&lt;/rdf:Description&gt; <br>
<p>which represents the Bag resource. </p>
<p>The container implementation provides a getMembers() method for getting the 
  content of a container, as an array of ResResources: </p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>// Print out the full names of the members of the bag<br>
        echo '&lt;BR&gt;&lt;BR&gt;&lt;b&gt;Print out the full names of the members of the bag:&lt;/b&gt;&lt;/BR&gt;'; <br>
        foreach ($bag_smiths-&gt;getMembers() as $resResource)<br>
        {<br>
&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve the value of the FN property <br>
&nbsp;&nbsp;&nbsp;&nbsp;$statement = $resResource-&gt;getProperty($vcard_FN);<br>
&nbsp;&nbsp;&nbsp;&nbsp;echo $statement-&gt;getLabelObject().'&lt;BR&gt;'; <br>
};</p>      </td>
    </tr>
  </tbody>
</table>
<p>The RAP ResContainer classes currently ensure that the the list of ordinal 
  properties starts with rdf:_1 and is contiguous. The RDFCore WG have relaxed 
  this constrain, so RAPS's container implementation might follow in the future.</p>
<p>It is not a problem to use a container object and to modify the state underlying 
  model using lower level methods at the same time, because all container level 
  operations are directly written into the underlying model.</p>
<p>Write the model as HTML table:</p>

<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
        <p>echo '&lt;BR&gt;&lt;BR&gt;All Statements as HTML table';<br>
          $model-&gt;writeAsHTMLTable();</p></td>
    </tr>
  </tbody>
</table>
<p>&nbsp;</p>
</BODY>
</HTML>
