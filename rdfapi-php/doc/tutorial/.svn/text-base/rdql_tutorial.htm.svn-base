<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>RDQL Tutorial</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<LINK href="../phpdoc.css" rel=stylesheet type=text/css>
</HEAD>
<BODY bgcolor="#FFFFFF">

<H3>RDF API for PHP </H3>
<h1>RDQL Tutorial</h1>
<p>This turorial is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<br>
<p>Radoslaw Oldakowski &lt;<a href="mailto:radol@gmx.de">radol@gmx.de</a>&gt; <br>
October 2004</p>
<br>

<p>In this tutorial I will explain the syntax of the RDQL query language implemented in RDF API for 
PHP and show how to query RDF models created within the API. The exact RDQL grammar 
for RAP's RDQL Engine, described in Bacus Naur Form (BNF), is provided <A HREF="../rdql_grammar.htm">here</A>.</p>

<p>The general form of an RDQL query, shown below, resembles an SQL statement:</p>

<table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>SELECT <i>variables listing  </i><br> 
                          FROM <i>rdf documents </i><br> 
			  WHERE <i>patterns </i><br> 
			  AND <i>filter expressions </i><br> 
                          USING <i>prefix declaration </i>
   </code></p>
 </td></tr></tbody></table>
 <br><br>
 
 <h3>SELECT</h3>
 <p>Every successful query returns a set of variable bindings. In the <code>SELECT</code> clause we define a list of variables to be returned. 
 Each variable is introduced by a question mark (?) and can be named using alphanumerical characters combined with an underscore (_). 
 Multiple variables are separated by a space and/or an optional comma (,), for example:</p>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          SELECT ?name ?email, ?age,?tel_number  
   </code></p>
 </td></tr></tbody></table>
 
<p> In case that we want to specify all query variables, we can use the SQL-like shortcut in form of a star (*):</p>
 
  <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          SELECT *
   </code></p>
 </td></tr></tbody></table>
 <br><br>
 
 <h3>FROM</h3>
 
<p>In the <code>FROM</code> clause we specify the path or URL of the RDF document 
  to be queried. However, this tutorial focuses on querying RDF models created 
  within RAP (MemModels or DbModels) by passing the RDQL query string to the method 
  <code>rdqlQuery()</code>. In this case the query is performed on a particular 
  model, thus there is no need to specify it once again. If the passed string 
  contains a <code>FROM </code>clause, it will then be ignored by the query engine. 
</p>
 <br>
 
 <h3>WHERE</h3>
<p> In the <code>WHERE</code> clause we indicate a list of triple patterns which 
  have to be matched by each valid query result set. All patterns representing 
  an RDF statement have the form <code>(subject, predicate, object)</code> where 
  the subject, predicate, and object can either be a <code>&lt;URIref&gt;</code> 
  or a <code>?variable</code>. The object can moreover be a <code>"Literal"</code>, 
  for example:</p>

<table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          WHERE (?resource, &lt;http://www.w3.org/2001/vcard-rdf/3.0/EMAIL&gt;,  "radol@gmx.de")
   </code></p>
 </td></tr></tbody></table>
 
 <p>This will match any statement of an RDF model with a predicate indicated
   by the above URIref (vCard's email property)  and an object represented by
   the literal <code>"radol@gmx.de"</code>. Furthermore, we can specify the language
   and datatype of a literal: 
 <code>"literal string"@lang^^&lt;datatypeURI&gt;</code>. Note that the language
 tag has no effect when the literal is datatyped,  except for <code>rdf:XMLLiterals</code> and
 plain literals. Correspondingly to the <code>SELECT</code> clause, using commas
 (,) is also optional. </p>
 <br>
 
 <h3><a name="#and">AND</a></h3>
<p> In addition to the triple patterns of the <code>WHERE</code> clause, in the 
  <code>AND</code> part of an query we can specify Boolean expressions over values 
  of URIs and literals. RAP's implementation of RDQL shows the real expressive 
  power of this query language. And so, we can use: </p>

<li><p>arithmetic conditions (including multiplicative and additive operators), for instance:<p></li>

<table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          AND (10 + ?age)*2 &lt;= 60/2, ?weight == 75
   </code></p>
 </td></tr></tbody></table>
 
<p>(multiple expressions are separated by commas)</p>

 <li><p>string equality expressions, where <code>EQ</code> stands for "equal" and <code>NE</code> for "not equal":<p></li>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          AND ?name EQ "Radoslaw Oldakowski", ?resource NE &lt;http://example.org/&gt;
   </code></p>
 </td></tr></tbody></table>
 <br>
 
 <li><p>Perl-style <A HREF="http://www.php.net/manual/en/reference.pcre.pattern.syntax.php">regular expressions</A>, where "~~" | "=~" stands for "match" 
 and "!~" for "not match", for example, return only HTML documents:<p></li>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          AND ?document ~~ "/\.html$/i"
   </code></p>
 </td></tr></tbody></table>
 
 <p>We can also combine multiple filter expressions using logical operators "&&" (AND), "||" (OR): </p>
 
  <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          AND ( (10 + ?age)*2 &lt;= 60/2) && (?name EQ "Radoslaw Oldakowski") )
   </code></p>
 </td></tr></tbody></table>
 
 <p>as well as use negation indicated by the exclamation mark (!):</p>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          AND !( ((10 + ?age)*2 &lt;= 60/2) && (?name1 EQ ?name2) )
   </code></p>
 </td></tr></tbody></table>
 <br><br>
 
 <h3>USING</h3>
 
 <p>To make the query easier to read and write for humans, RDQL provides a way
   to shorten the length of URIs (used in the <code>FROM, WHERE</code> 
 and <code>AND</code> clauses)  by defining a string prefix. Every prefix is
 defined in the <code>USING</code> clause as demonstrated below:</p>
 
  <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          WHERE (?resource, vCard:EMAIL, "radol@gmx.de") <br>
          USING vCard FOR &lt;http://www.w3.org/2001/vcard-rdf/3.0/&gt;
   </code></p>
 </td></tr></tbody></table>
 
 <p>Note that since RAP V0.8 QNames (e.g. vCard:EMAIL) in contrast to full URI's
   need not to be surrounded by '&lt;' and '&gt;'. However, the RDQL parser is also
   backawrd compatible
   with earlier versions of the RDQL grammar (RAP V0.6 - RAP V0.7.1). Moreover,
   RAP supports default prefixes (e.g. <code>rdf</code>, <code>rdfs</code>, <code>xsd</code>)
   that can be used without an explicit definition.</p>
 <br>
 
 <h3>Comments</h3>
 <p>While writing very long and complicated RDQL queries, it is often of great benefit to comment the code. For this purpose RAP allows us to use two kinds 
 of comment syntaxes. The first one is the one-line comment introduced by "//", the second has the form of <code>/* this is a comment */</code>.</p>
 <br>
 
 <h3>Query Examples</h3>
 
<p>At this point it is time to put together all the pieces explained so far and 
  present RAP's RDQL Engine in action. In the following part of this section we 
  will be querying an RDF document describing employees of an example corporation 
  (<A HREF="employees.rdf">employees.rdf</A>). The working code for the examples 
  that will be demonstrated in this RDQL tutorial is <A HREF="rdql_tutorial.php.txt">rdql_tutorial.php</A>.</p>
 
 <p>We shall start with including all RAP classes needed and loading the document into a MemModel:</p>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          // Include all RAP classes <br>
	define("RDFAPI_INCLUDE_DIR", "C:/Apache/htdocs/rdf_api/api/"); <br>
	include(RDFAPI_INCLUDE_DIR . "RdfAPI.php"); <br>
        <br>
	// Create a new MemModel and load the document<br>
	$employees = ModelFactory::getDefaultModel();<br>
        $employees->load(RDFAPI_INCLUDE_DIR ."employees.rdf"); </code></p>
 </td></tr></tbody></table>
 
 <p>Once the model has been created, we can perform our first query which will be: "<i>find the full name of all employees</i>". 
 So, we create a variable <code>$query1</code> and assign it the corresponding query string:</p>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	$query1 = ' <br>
	SELECT ?fullName <br>
	WHERE (?x, vcard:FN, ?fullName) <br>
	USING vcard FOR &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;'; 
   </code></p>
 </td></tr></tbody></table>
 
 <p>To execute the query, we simply call the method <code>rdqlQuery()</code> on the MemModel and pass the variable holding the query string as parameter:</p>

 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	$result1 = $employees->rdqlQuery($query1);
   </code></p>
 </td></tr></tbody></table>
  
 <p>The result returned is an array of variable bindings with the values of these variables being RAP objects (<code>Resource</code>, 
 <code>Literal</code> or <code>BlankNode</code>). This enables us to use these objects for model update or other API calls. 
 We can, of course, print out the result on the screen as well.  For this purpose, RAP's RDQL engine offers a very convenient method 
 <code>writeQueryResultAsHtmlTable()</code>. All we have to do is to pass the query result to this method:</p> 
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	RdqlEngine::writeQueryResultAsHtmlTable($result1);
   </code></p>
 </td></tr></tbody></table>
 
 <p>This will result in the following output in the browser window:</p>
 
 <table border='1' cellpadding='3' cellspacing='0'>
   <tr>
     <td><b>No.</b></td>
     <td align='center'><b>?fullName</b></td>
   </tr>
    <tr>
     <td width='20' align='right'>1.</td>      
     <td bgcolor="#E7E7EF"><p>Literal: Bill Parker</p></td>
    </tr>
    <tr>
     <td width='20' align='right'>2.</td>      
     <td bgcolor="#E7E7EF"><p>Literal: George Simpson</p></td>
    </tr>
    <tr>
     <td width='20' align='right'>3.</td>      
     <td bgcolor="#E7E7EF"><p>Literal: Monica Murphy</p></td>
    </tr>
</table>
 
 <p>If we did not want to have objects being returned as variable values but their string serialization instead, 
 we would call the method <code>rdqlQeury()</code> and pass  <code>FALSE</code> as the second parameter:</p> 
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	$result2 = $employees->rdqlQuery($query1, FALSE);
   </code></p>
 </td></tr></tbody></table>
 
 <p>Note that in this case the resulting array could not be passed to the method <code>writeQueryResultAsHtmlTable()</code> so that we had to iterate it 
 using PHP's built-in <code>foreach</code> construct.</p>
 
 <p>As you can see querying RDF models in RAP is extremely easy. Similarly we also query persisted models by passing the RDQL string to the method 
 <code>rdqlQuery()</code> called on a DbModel. Hence, from this point on I will only explain how to formulate a query and show its corresponding result.</p>
 
 <p>In our next query: "<i>find the given name of all employees over 30</i>" we have to use a filter expression. 
 Moreover, in order to find out the given name we must specify the corresponding path in the graph leading through a Blank Node (marked bold):</p>
 
<table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	SELECT ?givenName, ?age <br>
	// This is an example of an one-line comment <br>
	WHERE (<b>?x, vcard:N, ?blank), <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank, vcard:Given, ?givenName)</b>, <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?x, /* and this is another type
        of comments */ v:age, ?age) <br>
	AND ?age &gt; 30 <br>
	USING vcard FOR &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;
        v FOR &lt;http://sampleVocabulary.org/1.3/People#&gt;
   </code></p>
 </td></tr></tbody></table>
 
 <p>In the above example, I have also demonstrated a possible way to insert comments. Here, the variable <code>?blank</code> is only used to link the resource 
 to the given name. We did not specify <code>?blank</code> in the <code>SELECT</code> clause, consequently we get:</p>
 
 <table border='1' cellpadding='3' cellspacing='0'>
  <tr>
   <td><b>No.</b></td>
   <td align='center'><b>?givenName</b></td>
   <td align='center'><b>?age</b></td>
  </tr>
  <tr>
   <td width='20' align='right'>1.</td>      
   <td bgcolor="#E7E7EF"><p>Literal: Bill</p>      
   <td bgcolor="#E7E7EF"><p>Literal: 33 <b>(rdf:datatype="http://www.w3.org/TR/xmlschema-2/integer")</b></p>
  </tr>
  <tr>
   <td width='20' align='right'>2.</td>      
   <td bgcolor="#E7E7EF"><p>Literal: George</p>      
   <td bgcolor="#E7E7EF"><p>Literal: 41 <b>(rdf:datatype="http://www.w3.org/TR/xmlschema-2/integer")</b></p>
  </tr>
 </table>
 
 <p>Note that the value of  <code>?age</code> is a datatyped literal. Yet another even more complex example might be: "<i>find the private telephone number 
 of the person whose office number is '+1 111 2222 668' and additionally return his given name and age</i>". In this query we have to specify several paths in the graph. 
 Furthermore, we use a string equality expression in the <code>AND</code> clause to filter the office number:</p>

<table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	SELECT ?givenName ?age ?telNumberHome<br>
	WHERE (?person vcard:N ?blank1)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank1 vcard:Given ?givenName)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?person v:age ?age)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?person vcard:TEL ?blank2)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank2 rdf:value ?telNumberHome)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank2 rdf:type vcard:home)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?person vcard:TEL ?blank3)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank3 rdf:value ?telNumberOffice)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank3 rdf:type vcard:work)<br>
        AND ?telNumberOffice eq "+1 111 2222 668"<br>
        USING vcard FOR &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v FOR &lt;http://sampleVocabulary.org/1.3/People#&gt;
   </code></p>
 </td></tr></tbody></table>

<p>As shown in this example we can leave out commas. Note also that we make use of the default prefix <code>rdf</code> 
(e.g. <code>rdf:type</code>) supported by RAP's RDQL engine. This query returns one matching set of variable bindings:</p>

<table border='1' cellpadding='3' cellspacing='0'>
 <tr>
  <td><b>No.</b></td>
  <td align='center'><b>?givenName</b></td>
  <td align='center'><b>?age</b></td>
  <td align='center'><b>?telNumberHome</b></td>
 </tr>
 <tr>
  <td width='20' align='right'>1.</td>      
  <td bgcolor="#E7E7EF"><p>Literal: Bill</p>      
  <td bgcolor="#E7E7EF"><p>Literal: 33 <b>(rdf:datatype="http://www.w3.org/TR/xmlschema-2/integer") </b></p>      
  <td bgcolor="#E7E7EF"><p>Literal: +1 111 2212 431</p>
 </tr>
</table>

<p>So far, the values of all variables returned were literals. However, we can ask for resources as well. Consider the following query: 
"<i>find the resources that represent employees whose family name starts with 'M' and additionally return the corresponding office email address</i>". 
This can be written in RDQL as shown below:</p>

<table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	SELECT ?resource, ?email <br>
	WHERE (?resource, vcard:N, ?blank1) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank1, vcard:Family, ?familyName) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?resource, vcard:EMAIL, ?blank2) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank2, rdf:value, ?email) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?blank2, rdf:type, vcard:work) <br>
	AND ?familyName ~~ "/^M/" <br>
	USING vcard FOR &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; 
   </code></p>
 </td></tr></tbody></table>
 
 <p>In this case we use a <A HREF="http://www.php.net/manual/en/reference.pcre.pattern.syntax.php">regular expression</A> to indicate the first letter of the family name 
 and once again apply the default prefix <code>rdf</code>. This results in:</p>
 
<table border='1' cellpadding='3' cellspacing='0'>
 <tr>
  <td><b>No.</b></td>
  <td align='center'><b>?resource</b></td>
  <td align='center'><b>?email</b></td>
 </tr>
 <tr>
  <td width='20' align='right'>1.</td>      
  <td bgcolor="#FFFFCC"><p>Resource: http://example.com/employees/MonicaMurphy/</p>      
  <td bgcolor="#E7E7EF"><p>Literal: M.Murphy@example.com</p>
 </tr>
</table>

<p>&nbsp;</p>
<p>For more query examples see <A HREF="../tests/Test_RDQL_Query.htm">Documentation</A> 
  included in RAP documentation. You can additionally visit the website with the 
  <a href="http://www3.wiwiss.fu-berlin.de/rdfapi-php/test/custom_rdql_test.php">Interactive 
  RDQL Demonstration</a> allowing you to practice with your own documents and 
  queries. Furthermore, <a href="http://www3.wiwiss.fu-berlin.de/rdfapi-php/test/jena-rdql-testcases.php"> 
  RDQL Test Cases</a> give you an even deeper insight into RAP implementation 
  of RDQL by providing the opportunity to go through 77 queries testing different 
  aspects of the language implementation, performed in real time on both a memory 
  and a persisted model.</p>

</BODY>
</HTML>
