<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Using RAP's Statement-Centric MemModel API</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<LINK href="../phpdoc.css" rel=stylesheet type=text/css>
<style type="text/css">
<!--
.Stil1 {
	color: #CC3300;
	font-weight: bold;
}
-->
</style>
</head>

<body bgcolor="#ffffff">
<h3>RDF API for PHP </h3>
<h1><span class="sectionHeading">Using RAP's Statement-Centric MemModel API</span></h1>
<p>This turorial is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<br>
<p><a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/radoslaw_oldakowski.htm" target="_blank">Radoslaw Oldakowski</a>, <a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/daniel_westphal.htm" target="_blank">Daniel Westphal</a> <br>
October 2004</p>
<br>
<p>This tutorial demonstrates how RAP's statement-centric MemModel API is used 
  for creating and manipulating RDF models. <br>
  More information about the MemModel API is found in the <a href="../phpdoc/index_memmodel.html">MemModel PHPdocs</a>. 
  An overview about RAP's other APIs is given in <a href="introductionToRAP.htm">Introduction 
  to RAP</a>.</p>
<h3>Contents:</h3>
<table>
  <tbody>
  <tr>
    <td align="right">1.</td>
    <td><a href="#s1">Installation</a></td></tr>
  <tr>
    <td align="right">2.</td>
    <td><a href="#s2">Creating 
      Statements</a></td></tr>
  <tr>
    <td align="right">3.</td>
    <td><a href="#s3">Generating 
      RDF Models</a></td></tr>
  <tr>
    <td align="right">4.</td>
    <td><a href="#s4">Printing 
      Out a Model</a></td></tr>
  <tr>
    <td align="right">5.</td>
    <td><a href="#s5">Saving 
      a Model Serialization to File</a></td></tr>
  <tr>
    <td align="right">6.</td>
    <td><a href="#s6">Blank 
      Nodes</a></td></tr>
  <tr>
    <td align="right">7.</td>
    <td><a href="#s7">Typed 
      Literals</a></td></tr>
  <tr>
    <td align="right">8.</td>
    <td><a href="#s8">Traversing 
      a Model</a></td></tr>
  <tr>
    <td align="right">9.</td>
    <td><a href="#s9">Comparing 
      and Combining Models</a></td></tr>
  <tr>
    <td align="right">10.</td>
    <td><a href="#s10">Querying 
      a Model</a></td></tr>
  <tr>
    <td align="right">11.</td>
    <td><a href="#s11">Reification</a></td></tr>
  <tr>
    <td align="right">12.</td>
    <td><a href="#s12">Terminating 
      a Model</a></td></tr>
  <tr>
    <td align="right">13.</td>
    <td><a href="#s13">Implementation Notes </a></td>
  </tr>  
  </tbody></table>
<br><br>
<h3><a name="s1">1. Installation</a></h3>
<p>To get started we need to download the most recent version of RDF API for PHP 
from <a href="http://sourceforge.net/projects/rdfapi-php/">http://sourceforge.net/projects/rdfapi-php/</a> 
and unzip the package. Note that RAP requires PHP 4.2 or later.</p>
<p>Next we can begin with an example script. The first step is to include all 
RAP classes. We do it by defining the directory in which the API has been 
unzipped and then include the file <code>RdfAPI.php</code> as shown below.</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>define("RDFAPI_INCLUDE_DIR", "C:/Apache/htdocs/rdf_api/api/"); 
      <br>include(RDFAPI_INCLUDE_DIR . "RdfAPI.php"); 
</code></p></td></tr></tbody></table><br><br>
<h3><a name="s2">2. Creating Statements</a></h3>
<p>Creating statements with RAP is extremely easy. Since each statement in RAP 
is represented by an object (<code>Statement</code>), we have to create an 
instance of this object with subject, property, and value passed as parameters 
to the constructor function. </p>
<p>Consider the following statement written in N-Triple notation: 
<br><br><code>&lt;http://www.example.org/someDocument.html&gt; 
&lt;http://www.purl.org/dc/elements/1.1/creator&gt; "Radoslaw 
Oldakowski".</code><br><br>In order to represent this statement in RAP we first 
create its components (subject and predicate - both are resources indicated by 
URIs), which we will also be using later on in this tutorial:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$someDoc = new Resource 
      ("http://www.example.org/someDocument.html"); <br>$creator = new Resource 
      ("http://www.purl.org/dc/elements/1.1/creator"); 
</code></p></td></tr></tbody></table>
<p>and then pass them together with the third component (object 
<code>Literal</code>) to the constructor function:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$statement1 = new Statement ($someDoc, $creator, new Literal 
      ("Radoslaw Oldakowski")); </code></p></td></tr></tbody></table>
<p>RDF API for PHP also provides support for common vocabularies like <a href="http://dublincore.org/documents/dces/" target="_blank">Dublin Core</a> used in this 
statement. So instead of creating a new Resource (<code>$creator</code>) 
representing the creator property we can also use the pre-defined variable 
<code>$DC_creator</code> (see script DC.php). </p>
<p>In this straightforward way we have created our first object 
<code>Statement</code>. Having this object, we could now compare it with other 
statements (method <code>compare()</code>), serialize to string 
(<code>toString()</code>), reify (<code>reify()</code> - see <a href="#s11">Section 
11</a>), or what we probably would do in most cases add it to a model.</p><br>
<h3><a name="s3">3. Generating RDF Models</a></h3>
<p> An overview of the different kinds of RAP models is found in <a href="introductionToRAP.htm">Introduction 
  to RAP</a><strong>.</strong> RDF models can be stored either in main memory 
  (MemModel) or in a relational database (DbModel). Except for some indexing mechanisms 
  and Statement Iterator feature in the case of MemModel, all the other methods 
  are equal for both classes. So we can manipulate RDF models using the same function 
  names and expect the same output, regardless of the storage mechanism chosen. 
  In this tutorial I will focus on MemModels, whereas working with DbModels is 
  described <a href="database_persistence.htm">here</a>.<br>
The different kinds of models are created using a model factory.</p>
<p>In order to generate a new MemModel we simply write:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1 = ModelFactory::getDefaultModel();</code></p></td></tr></tbody></table>
<p>To specify a <i>base URI</i> of a MemModel, we can either pass the URI string 
as parameter to the constructor function or set it for an existing model using 
the method <code>setBaseURI()</code>. In our example we just leave the default 
setting and proceed with adding our first statement 
(<code>$statement1</code>):</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1-&gt;add($statement1); </code></p></td></tr></tbody></table>
<p>In this simple way we have created a model containing one statement. However, 
the method <code>add()</code> does not check if a MemModel already contains the 
statement to be added. So if you want to avoid duplicates, use the method 
<code>addWithoutDuplicates()</code> instead.</p>
<p>While generating a model we can add not only single statements but moreover 
also entire models. To demonstrate this, we create a new MemModel containing two 
statements:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model2 = ModelFactory::getDefaultModel()<br>$model2-&gt;add(new 
      Statement($someDoc, new 
      Resource("http://www.example.org/myVocabulary/title"), new Literal("RAP 
      tutorial"))); <br>$model2-&gt;add(new Statement($someDoc, new 
      Resource("http://www.example.org/myVocabulary/language"), new 
      Literal("English"))); </code></p></td></tr></tbody></table>
<p>and then add the second MemModel (<code>$model2</code>) just created to the 
first one (<code>$model1</code>):</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1-&gt;addModel($model2); </code></p></td></tr></tbody></table>
<p>The parameter passed to the method <code>addModel()</code> can be an instance 
of both classes MemModel and DbModel. If we now check the size of 
<code>$model1</code> using the method <code>size()</code>:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>echo "\$model1 contains " .$model1-&gt;size() ." statements"; 
      </code></p></td></tr></tbody></table>
<p>we will see that <code>$model1</code> contains now three 
statements:</p><b>Output:</b> 
<table dwcopytype="CopyTableRow" border="1" cellpadding="10" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td>
      <p>$model1 contains 3 statements</p></td></tr></tbody></table><br><br>
<h3><a name="s4">4. Printing Out a Model</a></h3>
<p>RDF API for PHP provides some useful methods for displaying the contents of a 
MemModel. Using the method <code>writeAsHtmlTable()</code> we can print out the 
MemModel as a table containing a set of triples. Methods <code>toString()</code> 
and <code>toStringIncludingTriples()</code> create a plain text serialization of 
the MemModel, whereas <code>writeRDFtoString()</code> and 
<code>writeAsHtml()</code> serialize the model to RDF/XML. The latter converts 
special chars to HTML entities, so that the serialization can properly be 
displayed in a browser window.</p>
<p>Accordingly, the following piece of code:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>// Output $model1 as HTML table <br>echo "&lt;b&gt;Output the 
      MemModel as HTML table: &lt;/b&gt;&lt;p&gt;"; 
      <br>$model1-&gt;writeAsHtmlTable(); <br><br>// Output the string 
      serialization of $model1 <br>echo "&lt;b&gt;Output the plain text 
      serialization of the MemModel: &lt;/b&gt;&lt;p&gt;"; <br>echo 
      $model1-&gt;toStringIncludingTriples(); <br><br>// Output the RDF/XML 
      serialization of $model1 <br>echo "&lt;b&gt;Output the RDF/XML 
      serialization of the MemModel: &lt;/b&gt;&lt;p&gt;"; <br>echo 
      $model1-&gt;writeAsHtml(); </code></p></td></tr></tbody></table>
<p>would render this output in a browser window:</p><b>Output:</b> 
<table dwcopytype="CopyTableRow" border="1" cellpadding="10" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td><b>Output the MemModel as HTML table: </b>
      <p>
      <table border="1" cellpadding="3" cellspacing="0" width="100%">
        <tbody>
        <tr bgcolor="#ffffff">
          <td colspan="3" td="" width="68%">
            <p><b>Base URI:</b> </p></td>
          <td width="32%">
            <p><b>Size:</b> 3</p></td></tr>
        <tr bgcolor="#ffffff">
          <td width="4%">
            <p align="center"><b>No.</b></p></td>
          <td width="32%">
            <p><b>Subject</b></p></td>
          <td width="32%">
            <p><b>Predicate</b></p></td>
          <td width="32%">
            <p><b>Object</b></p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">1.</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.purl.org/dc/elements/1.1/creator</p></td>
          <td bgcolor="#e7e7ef">
            <p>Literal: Radoslaw Oldakowski</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">2.</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/myVocabulary/title</p></td>
          <td bgcolor="#e7e7ef">
            <p>Literal: RAP tutorial</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">3.</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/myVocabulary/language</p></td>
          <td bgcolor="#e7e7ef">
            <p>Literal: English</p></td></tr></tbody></table><br><br><b>Output the 
      plain text serialization of the MemModel: </b>
      </p><p>MemModel[baseURI=; size=3] 
      Triple(Resource("http://www.example.org/someDocument.html"), 
      Resource("http://www.purl.org/dc/elements/1.1/creator"), Literal("Radoslaw 
      Oldakowski")) Triple(Resource("http://www.example.org/someDocument.html"), 
      Resource("http://www.example.org/myVocabulary/title"), Literal("RAP 
      tutorial")) Triple(Resource("http://www.example.org/someDocument.html"), 
      Resource("http://www.example.org/myVocabulary/language"), 
      Literal("English")) <br><br><br><b>Output the RDF/XML serialization of the 
      MemModel: </b>
      </p><p>&lt;?xml&nbsp;version='1.0'&nbsp;encoding='UTF-8'?&gt;<br>&lt;rdf:RDF<br>&nbsp;&nbsp;&nbsp;xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"<br>&nbsp;&nbsp;&nbsp;xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"<br>&nbsp;&nbsp;&nbsp;xmlns:ns1="http://www.purl.org/dc/elements/1.1/"<br>&nbsp;&nbsp;&nbsp;xmlns:ns2="http://www.example.org/myVocabulary/"&gt;<br><br>&lt;rdf:Description&nbsp;rdf:about="http://www.example.org/someDocument.html"&gt;<br>&nbsp;&nbsp;&nbsp;&lt;ns2:language&gt;English&lt;/ns2:language&gt;<br>&nbsp;&nbsp;&nbsp;&lt;ns2:title&gt;RAP&nbsp;tutorial&lt;/ns2:title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;ns1:creator&gt;Radoslaw&nbsp;Oldakowski&lt;/ns1:creator&gt;<br>&lt;/rdf:Description&gt;<br><br>&lt;/rdf:RDF&gt; 
      </p></td></tr></tbody></table><br><br>
<h3><a name="s5">5. Saving a Model Serialization to File</a></h3>
<p>In addition to displaying a MemModel on the screen, we can save its 
serialization to a file. RAP V0.8 supports the RDF/XML, N-Triple, and N3 syntax. 
Thus, when we call the method <code>saveAs()</code> and pass the filename as the 
first parameter, RAP will use the appropriate serializer according to the flag 
(<code>'rdf'</code> ,<code>'n3' , or 'nt'</code>) provided as the second 
parameter:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1-&gt;saveAs("model1.rdf", "rdf"); 
      <br>$model1-&gt;saveAs("model1.n3", "n3"); </code></p></td></tr></tbody></table>
<p>As output of the above code two files with RDF data have been created (<a href="model1.rdf">model1.rdf</a> 
and <a href="model1.n3">model1.n3</a>). 
In the case that we leave out the second parameter, RAP will use the default 
setting and will serialize the MemModel to RDF/XML.</p>
<p>To load an RDF model from a file we call the method <code>load()</code> 
passing the name or a URL of the document containing RDF data and its 
serialization syntax as parameters. If the second parameter is not provided, RAP 
will decide upon the suffix which parser to use.</p><br>
<h3><a name="s6">6. Blank Nodes</a></h3>
<p><i>Blank Nodes</i> in RDF API for PHP are represented by instances of object 
<code>BlankNode</code>. Every B-Node is assigned a unique identifier which can 
either be explicitly specified by the user or automatically generated for the 
model passed to the constructor method. However, these identifiers have only a 
local scope within a particular model. Thus, if two different RDF models use the 
same <i>blankNodeID</i>, it does not necessarily mean that the Blank Nodes 
identified by this ID must also be the same.</p>
<p>Consider the following modification of <code>$model1</code>: we replace the 
literal <code>"Radoslaw Oldakowski"</code>, being an object in the first 
statement, with a Blank Node. After that we make additional statements 
describing this B-Node. To do this, we first create a new BlankNode allowing the 
identifier to be automatically generated for our MemModel 
<code>$model1</code>:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$bNode = new BlankNode($model1); </code></p></td></tr></tbody></table>
<p>Next, using the method <code>replace()</code>, we exchange the objects:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1-&gt;replace(NULL, NULL, new Literal("Radoslaw 
      Oldakowski"), $bNode); </code></p></td></tr></tbody></table>
<p>This will search for all statements having an object equal to the passed 
literal and replace this literal with the value of the fourth parameter 
(<code>$bNode</code>). Subsequently we add new statements describing the Blank 
Node using RAP's pre-defined vCard vocabulary (<code>$VCARD_FN</code>, 
<code>$VCARD_EMAIL</code>):</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>include(RDFAPI_INCLUDE_DIR . "vocabulary/VCARD.php");<br />
      $model1-&gt;add(new Statement($bNode, $VCARD_FN, new 
      Literal("Radoslaw Oldakowski"))); <br>$model1-&gt;add(new 
      Statement($bNode, $VCARD_EMAIL, new Literal("radol@gmx.de"))); 
    </code></p></td></tr></tbody></table><br><br>
<h3><a name="s7">7. Typed Literals</a></h3>
<p>The next statement we are about to add to <code>$model1</code> describes the 
age of the person represented by the Blank Node <code>$bNode</code>. After 
having created the literal object:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$age = new Literal("26"); </code></p></td></tr></tbody></table>
<p>we can explicitly indicate the datatype of the literal using the method 
<code>setDatatype():</code> </p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$age-&gt;setDatatype("http://www.w3.org/TR/xmlschema-2/integer"); 
      </code></p></td></tr></tbody></table>
<p>and then add the entire statement to the MemModel as usual: </p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1-&gt;add(new Statement ($bNode, new 
      Resource("http://www.example.org/myVocabulary/age"), $age)) 
  </code></p></td></tr></tbody></table>
<p>Similarly, we can specify the language of a literal by calling the method 
<code>setLanguage()</code> or by passing the language string as second parameter 
to the constructor method on an object <code>Literal</code>.</p><br>
<h3><a name="s8">8. Traversing a Model</a></h3>
<p>If there is a need to traverse statements of a MemModel one by one, we can 
use a Statement Iterator. The Statement Iterator is an object created by calling 
the method <code>getStatementIterator()</code> on a MemModel, for instance:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$it = $model2-&gt;getStatementIterator(); 
  </code></p></td></tr></tbody></table>
<p>Once instanced, the Statement Iterator can be ordered to return the current 
(<code>current()</code>), next (<code>next()</code>), or previous 
(<code>previous()</code>) statement. It can also move to a desired position 
(<code>moveFirst()</code>, <code>moveLast()</code>, <code>moveTo()</code>). In 
the following example we will use the iterator to output the label (URI or 
literal string) of the subject, predicate and object of each statement in 
<code>$model2</code>:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>while ($it-&gt;hasNext()) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      $statement = $it-&gt;next(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo 
      "Statement number: " . $it-&gt;getCurrentPosition() . "&lt;BR&gt;"; 
      <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "Subject: " . 
      $statement-&gt;getLabelSubject() . "&lt;BR&gt;"; 
      <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "Predicate: " . 
      $statement-&gt;getLabelPredicate() . "&lt;BR&gt;"; 
      <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "Object: " . 
      $statement-&gt;getLabelObject() . "&lt;P&gt;"; <br>} 
  </code></p></td></tr></tbody></table>
<p>This will generate the following output on the browser 
screen:</p><b>Output:</b> 
<table dwcopytype="CopyTableRow" border="1" cellpadding="10" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td>
      <p>Statement number: 0 <br>Subject: 
      http://www.example.org/someDocument.html <br>Predicate: 
      http://www.example.org/myVocabulary/title <br>Object: RAP tutorial 
      <br><br>Statement number: 1 <br>Subject: 
      http://www.example.org/someDocument.html <br>Predicate: 
      http://www.example.org/myVocabulary/language <br>Object: English 
  </p></td></tr></tbody></table>
<p>Since the Statement Iterator does not use the PHP's built-in array iterator, 
we can independently use several instances of object StatementIterator on the 
same model. This feature, however, is only accessible for instances of class 
<code>MemModel</code>.</p><br>
<h3><a name="s9">9. Comparing and Combining Models</a></h3>
<p>RDF API for PHP provides three methods for comparing models. Using the 
function <code>equals()</code> we can find out if two models are the same. 
Methods <code>containsAny()</code> and <code>containsAll()</code> return a 
corresponding Boolean value about statements shared by two models being 
compared.</p>
<p>Furthermore, we can combine two different models by using either of the 
methods <code>unite()</code>, <code>subtract()</code> or 
<code>intersect()</code>, which will return a new MemModel respectively. More 
details about these functions can be found in <a href="../phpdoc/index_memmodel.html">RAP 
documentation</a>.</p>
<p>As far as the methods described in this section are concerned, RAP offers a 
high degree of flexibility by allowing the passed parameter to be an instance of 
either a <code>MemModel</code> or <code>DbModel</code>.</p><br>
<h3><a name="s10">10. Querying a Model</a></h3>
<p>One of the probably most frequent activities performed on a model is querying 
it. RDF API for PHP V0.9.1 offers various methods helping to find the desired 
information. We can, for instance, take our <code>$model1</code> and search for 
statements having subject <code>http://www.example.org/someDocument.html</code>. 
For this purpose we use the method <code>find()</code> and pass the object 
Resource <code>$someDoc</code> representing this particular subject as 
parameter: </p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$result = $model1-&gt;find($someDoc, NULL, NULL); 
      <br>$result-&gt;writeAsHtmlTable(); </code></p></td></tr></tbody></table>
<p><code>NULL</code> will match anything. The value returned by this method is 
another MemModel containing triples matching the passed statement pattern. If we 
print out the result model as HTML table the following output will 
occur:</p><b>Output:</b> 
<table dwcopytype="CopyTableRow" border="1" cellpadding="10" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td height="275">
      <table border="1" cellpadding="3" cellspacing="0" width="100%">
        <tbody>
        <tr bgcolor="#ffffff">
          <td colspan="3" td="" width="68%">
            <p><b>Base URI:</b> </p></td>
          <td width="32%">
            <p><b>Size:</b> 3</p></td></tr>
        <tr bgcolor="#ffffff">
          <td width="4%">
            <p align="center"><b>No.</b></p></td>
          <td width="32%">
            <p><b>Subject</b></p></td>
          <td width="32%">
            <p><b>Predicate</b></p></td>
          <td width="32%">
            <p><b>Object</b></p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">1.</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.purl.org/dc/elements/1.1/creator</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode1</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">2.</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/myVocabulary/title</p></td>
          <td bgcolor="#e7e7ef">
            <p>Literal: RAP tutorial</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">3.</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/myVocabulary/language</p></td>
          <td bgcolor="#e7e7ef">
      <p>Literal: English</p></td></tr></tbody></table></td></tr></tbody></table>
<p>Besides the method find() which delivers a new MemModel as query result, RAP
  also provides a Find Iterator for Traversing statements matching the specified
  pattern.  The Find Iterator is an object created
  by calling the method <code>findAsIterator()</code> on
  a <code>MemModel</code> and passing the statement pattern as parameter (similarly
  like in the case of <code>find())</code>. Once instanced, the Find
  Iterator can be ordered to return the current (<code>current()</code>) 
  or to find the next (<code>next()</code>) matching statement. </p>
<p>Methods <code>findFirstMatchingStatement()</code> and 
  <code>findCount()</code> are very similar to <code>find()</code>. The former returns
  a model containing only one statement, whereas the latter merely returns the
  number
  of statements
  
matching the specified pattern. </p>
<p>If we want to be even more specific in our queries, we will be likely to use 
the method <code>findRegex()</code>, which searches the model for triples 
matching a Perl-style regular 
expression. Furthermore, using the method <code>findVocabulary()</code> we 
can filter all statements of a certain vocabulary. </p>
<p>RAP V0.9.1 also offers another method for querying RDF models using RDQL query 
language. However, this method, as well as RDQL itself, is much more 
sophisticated than the previously described functions and therefore is presented 
separately in the <a href="rdql_tutorial.htm">RDQL 
tutorial</a>.</p>
<p>To increase query performance RDF API for PHP builds by default three search
  indices over the subject, predicate, and object. Moreover, you can also
  manually customize the indices used, according to the search pattern specified
  in your query. This will result in much better performance (however, creating
  an
index takes time). RAP allows users to build an index over the combined
  labels of subject, predicate, and object or just subject and predicate, or
  subject and object. To do this you simply have to  call the method <code>index()</code>
  and pass the appropriate parameter (<code>IND_SPO</code>, <code>IND_SP</code>, <code>IND_SO</code> respectively
  or
<code>NO_INDEX</code> if you want to delete all indices). </p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top">
      <td bgcolor="#e7e7ef">
        <p><code>$model1 = ModelFactory::getDefaultModel();</code><br>
            <code>$model1-&gt;index(IND_SPO); </code></p>      </td>
    </tr>
  </tbody>
</table>
<p></p>
<h3><a name="s11">11. Reification</a></h3>
<p>To perform a reification in RAP, we simply call the method 
<code>reify()</code> on an object <code>Statement</code>. The MemModel returned 
will contain four statements according to the <a href="http://www.w3.org/TR/REC-rdf-syntax#higherorder" target="_blank">RDF 
specification</a>.</p>
<p>Moreover, we can use the method <code>reify()</code> on an instance of 
<code>MemModel</code> or <code>DbModel</code> in order to reify all statements 
of this particular model. To demonstrate this, we take our <code>$model2</code>: 
and reify all its statements:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$reified = $model2-&gt;reify(); 
      <br>$reified-&gt;writeAsHtmlTable(); </code></p></td></tr></tbody></table>
<p>The corresponding result model <code>$reified</code> consists of 8 triples, 
four for each reified statement as the browser output in form of an HTML table 
shows:</p><b>Output:</b> 
<table dwcopytype="CopyTableRow" border="1" cellpadding="10" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td>
      <table border="1" cellpadding="3" cellspacing="0" width="100%">
        <tbody>
        <tr bgcolor="#ffffff">
          <td colspan="3" td="" width="68%">
            <p><b>Base URI:</b> </p></td>
          <td width="32%">
            <p><b>Size:</b> 8</p></td></tr>
        <tr bgcolor="#ffffff">
          <td width="4%">
            <p align="center"><b>No.</b></p></td>
          <td width="32%">
            <p><b>Subject</b></p></td>
          <td width="32%">
            <p><b>Predicate</b></p></td>
          <td width="32%">
            <p><b>Object</b></p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">1.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode1</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: http://www.w3.org/1999/02/22-rdf-syntax-ns#type</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
          http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">2.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode1</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
          http://www.w3.org/1999/02/22-rdf-syntax-ns#subject</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">3.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode1</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
          http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/myVocabulary/title</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">4.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode1</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
http://www.w3.org/1999/02/22-rdf-syntax-ns#object</p></td>
          <td bgcolor="#e7e7ef">
            <p>Literal: RAP tutorial</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">5.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode2</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: http://www.w3.org/1999/02/22-rdf-syntax-ns#type</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
          http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">6.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode2</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
          http://www.w3.org/1999/02/22-rdf-syntax-ns#subject</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/someDocument.html</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">7.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode2</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
          http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate</p></td>
          <td bgcolor="#ffffcc">
            <p>Resource: http://www.example.org/myVocabulary/language</p></td></tr>
        <tr valign="top">
          <td>
            <p align="center">8.</p></td>
          <td bgcolor="#ffccff">
            <p>Blank Node: bNode2</p></td>
          <td bgcolor="#ccffcc">
            <p>RDF Node: 
http://www.w3.org/1999/02/22-rdf-syntax-ns#object</p></td>
          <td bgcolor="#e7e7ef">
            <p>Literal: 
English</p></td></tr></tbody></table></td></tr></tbody></table><br><br>
<h3><a name="s12">12. Terminating a Model</a></h3>
<p>If we know that we will no longer use an object <code>MemModel</code>, we 
shall terminate it and free up resources held, especially while working with 
MemModels containing a great amount of statements. We can do it by simply 
calling the method <code>close()</code>. This way we will close all instances of 
class <code>MemModel</code> used in this tutorial as follows:</p>
<table dwcopytype="CopyTableRow" border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
  <tr valign="top">
    <td bgcolor="#e7e7ef">
      <p><code>$model1-&gt;close(); <br>$model2-&gt;close(); 
      <br>$result-&gt;close(); <br>$reified-&gt;close(); 
  </code></p></td></tr></tbody></table><br>
<p>You can find the source code for this tutorial <a href="rap_tutorial.php.txt">here</a>. 
A detailed description of all methods used can be found in the <a href="../phpdoc/index_memmodel.html">method 
reference of class MemModel</a> provided with RAP documentation. </p>
<p>&nbsp;</p>
<h3><a name="s13">13. Implementation Notes</a></h3>
<p>The MemModel implementation stores statements in an array in the system memory. 
  If a new statement is added to the model, it's appended to the array and added 
  to a statement index in order to accelerate queries. MemModel is the fastest 
  of all Model API implementations.</p>
<p><img src="img/memmodel.png" /></p>
<p><br>
</p>
<p></p></body></html>
