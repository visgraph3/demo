<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Using RAP's Resource-Centric ResModel API</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<LINK href="../phpdoc.css" rel=stylesheet type=text/css>
</HEAD>
<BODY bgcolor="#FFFFFF">

<H3>RDF API for PHP </H3>
<h1> Using RAP's  RDF Dataset API </h1>
<p>This turorial is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<p><a href="http://www.d-westphal.de" target="_blank">Daniel Westphal</a>, <a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/chris_bizer.htm" target="_blank">Chris Bizer</a><br>
July 2005</p>
<h2>Table of Contents </h2>
<ol>
  <li><a href="#ch-Introduction">Introduction </a></li>
  <li><a href="#navigating">Usage Examples</a><a href="#querying_a_model"><br>
  </a></li>
</ol>
<h2><a name="intro">1. Introduction </a></h2>
<p>This section gives an introduction into the ideas behind <a href="#ng-intro">Named Graphs </a> and  <a href="#ng4j-intro">RAP's RDF datset API</a>. </p>
<h3><a name="ng-intro"></a>1.1 Named Graphs </h3>
<p>The Semantic Web can be seen as a collection of RDF graphs. The RDF recommendation explains the meaning of any one graph, and how to merge a set of graphs into one, but does not provide suitable mechanisms for talking about graphs or relations between graphs. But the ability to express metainformation about graphs is required for: </p>
<ul>
  <li>Data syndication systems need to keep track of provenance information, and provenance chains.
  <li>Restricting information usage: Information providers might want to attach information about intellectual property rights or their privacy preferences to graphs in order to restrict the usage of published information.
  <li>RDF repository housekeeping: Triple stores need mechanisms to replace and update parts of their content.
  <li>Access control: A triple store may wish to allow fine-grain access control, which appears as metadata concerning the graphs in the store.
  <li>Signing RDF graphs: For signing RDF graphs it is necessary to keep the graph that has been signed distinct from the signature, and other etadata concerning the signing, which may be kept in a second graph.
  <li>Expressing propositional attitudes such as modalities and beliefs.
  <li>Scoping assertions and logic where logical relationships between graphs have to be captured. </li>
</ul>
<p><br>
  RDF reification has well-known problems in addressing these use cases. To avoid these problems several authors propose quads, consisting of an RDF triple and a further URIref or blank node or ID. The proposals vary widely in the semantic of the fourth element, using it to refer to information sources, to model IDs or statement IDs or more generally to contexts. Named Graphs propose a general and simple variation on RDF, using sets of named RDF graphs. </p>
<p>A set of Named Graphs is a collection of RDF graphs. Each one is named with a URIref.
<p>The name of a graph may occur either in the graph itself, in other graphs, or not at all. Graphs may share URIrefs but not blank nodes. Named Graphs can be seen as a reformulation of quads in which the fourth elements distinct syntactic and semantic properties are clearly distinguished, and the relationship to RDFs triples, abstract syntax and semantics is clearer. </p>
<p>Named Graphs has been adopted by <a href="http://www.w3.org/2001/sw/DataAccess/">W3C Data Access Working Group</a> as data model for the <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL query language</a>.</p>
<p>Further details about Named Graphs are found in: </p>
<ul>
  <li><a href="http://www.w3.org/2004/03/trix/">W3C Named Graphs Website </a>
  <li><a href="http://www.wiwiss.fu-berlin.de/suhl/bizer/pub/Carroll_etall-WWW2005.pdf">Jeremy Carroll, Chris Bizer, Pat Hayes, Patrick Stickler: Named Graphs, Provenance and Trust </a>. </li>
</ul>
<h3></h3>
<h3><a name="ng4j-intro"></a>1.2 RAP Dataset API </h3>
<p>RAP's quad- and named graph-centric Dataset API is an implementation of <a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset">DAWG's RDF dataset</a>. It provides methods for parsing, manipulating and serializing RDF datasets and pure sets of Named Graphs. It also provides an  implementation of the <a href="http://www.hpl.hp.com/techreports/2004/HPL-2004-56">TriX  syntax</a> for exchanging RDF datasets. </p>
<p>The basic idea of the Dataset API is to have a set of Named Graphs plus one additional unnamed default graph. The dataset  can be manipulated by adding and removing entire Named Graphs, or by working with individual Quads. </p>
<strong><a name="api-overview" id="api-overview"></a>API Overview </strong>
<p>The tables below give an overview about RAPs main interfaces and their most important methods. See <a href="../phpdoc/index.html">PHPDoc </a> for details about all methods. </p>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tr>
    <td colspan="2"><strong>NamedGraph </strong></td>
  </tr>
  <tr>
    <td colspan="2">A collection of RDF triples which is named by a URI. The NamedGraph object wraps RAP models, meaning that MemModel and DbModel can be reused.</td>
  </tr>
  <tr>
    <td width="28%">setGraphName(URI) <br></td>
    <td width="72%">Sets the name of the graph.</td>
  </tr>
  <tr>
    <td>getGraphName(URI) <br></td>
    <td>Returns the URI of the named graph. </td>
  </tr>
  <tr>
    <td colspan="2">plus all other methods from <a href="usingtheModelAPI.htm">statement-centric model API</a>.</td>
  </tr>
</table>
<br>
&nbsp;
<table border="1" cellpadding="3" cellspacing="0">
  <tr>
    <td colspan="2"><strong>Dataset</strong></td>
  </tr>
  <tr>
    <td colspan="2">An <a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset">RDF datset</a> is a collection of named RDF graphs  plus one additional unnamed default graph. RDF datsets can be accessed and modified by adding and removing NamedGraph instances, by adding, removing and finding Quads (RDF triples with an additional graph name) and by adding triple to the background graph. RDF datasets can be serialized using TriX.</td>
  </tr>
  <tr>
    <td valign="top" width="28%">addNamedGraph(namedgraph) </td>
    <td width="72%">Adds a NamedGraph to the set. </td>
  </tr>
  <tr>
    <td valign="top">addQuad(quad) </td>
    <td>Adds a quad to the set of Named Graphs in the RDF dataset. A new NamedGraph will automatically be created if necessary. </td>
  </tr>
  <tr>
    <td valign="top">addDefaultGraph(graph) </td>
    <td>Adds the default graph to the RDF dataset.</td>
  </tr>
  <tr>
    <td valign="top">createGraph(graphName,baseURI)<br></td>
    <td>Creates a new NamedGraph and adds it to the set. An existing graph with the same name will be replaced.</td>
  </tr>
  <tr>
    <td valign="top">getNamedGraph(graphName)</td>
    <td>Returns the NamedGraph with a specific name from the Dataset.</td>
  </tr>
  <tr>
    <td valign="top">getDefaultGraph()</td>
    <td>Returns a reference to the default graph of the Dataset.</td>
  </tr>
  <tr>
    <td valign="top">removeNamedGraph(graphName)</td>
    <td>Removes a NamedGraph from the set.</td>
  </tr>
  <tr>
    <td valign="top">findInNamedGraphs(quad) </td>
    <td>Finds Quads that match a quad pattern. </td>
  </tr>
  <tr>
    <td valign="top">listNamedGraphs()</td>
    <td>Returns an iterator over all NamedGraphs in the set.</td>
  </tr>
  <tr>
    <td valign="top"> serializeToFile()</td>
    <td>Saves RDF datset as TriX file. </td>
  </tr>
  <tr>
    <td valign="top"> sparqlQuery(query [, resultForm])</td>
    <td>Executes a <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL</a> query against the dataset. </td>
  </tr>
</table>
<br>
<p>&nbsp;</p>
<h2><a name="navigating" id="navigating">Usage Examples </a></h2>
<h3> 2.1 Operations on Datasets and NamedGraphs </h3>
<table border="1" cellpadding="3" cellspacing="0" width="100%">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>&nbsp;</p>
        <table cellspacing="0" cellpadding="3">
          <tr>
            <td bgcolor="#e7e7ef"><p>&lt;?php <br>
              // Include RAP <br>
              define(&quot;RDFAPI_INCLUDE_DIR&quot;, &quot;./../api/&quot;); <br>
              include(RDFAPI_INCLUDE_DIR . &quot;RdfAPI.php&quot;); </p>
                <p>//get a GraphSet from the ModelFactory <br>
                  $graphset = ModelFactory::getDatasetMem('Dataset1'); </p>
                <p>// Create a new NamedGraphsMem <br>
                  $graph1 = new NamedGraphMem('http://graph1'); <br>
                  $graph2 =&amp; $graphset-&gt;createGraph('http://graph2'); </p>
                <p>//create Quads <br>
                  $quad1= new Quad(new Resource('http://graph3'),new Resource('http://subject1'),new Resource('http://predicate1'),new Resource('http://object1')); <br>
                  $quad2= new Quad(new Resource('http://graph3'),new Resource('http://subject2'),new Resource('http://predicate2'),new Resource('http://object2')); <br>
                  $quad3= new Quad(new Resource('http://graph4'),new Resource('http://subject3'),new Resource('http://predicate3'),new Resource('http://object3')); <br>
                  $quad5= new Quad(new Resource('http://graph4'),new Resource('http://subject5'),new Resource('http://predicate5'),new Resource('http://object5')); </p>
                <p>//add Quads to the GraphSet. Thee needed NamedGraphs will be created automatically <br>
                  $graphset-&gt;addQuad($quad1); <br>
                  $graphset-&gt;addQuad($quad3); <br>
                  $graphset-&gt;addQuad($quad2); </p>
                <p>//add a NamedGraph to the Set <br>
                  $graphset-&gt;addNamedGraph('http://graph1',$graph1); </p>
                <p>//Is the Graph &quot;http://graph1&quot; part of the GraphSet? <br>
                  echo '&lt;b&gt;Is the Graph &quot;http://graph1&quot; part of the GraphSet?&lt;/b&gt;&lt;BR&gt;'; <br>
                  var_dump($graphset-&gt;containsNamedGraph('http://graph1')); <br>
                  echo'&lt;p/&gt;'; </p>
                <p>//remove 'http://graph2' from the set <br>
                  $graphset-&gt;removeNamedGraph('http://graph2'); </p>
                <p>//Is the Graph &quot;http://graph2&quot; part of the GraphSet? <br>
                  echo '&lt;b&gt;Is the Graph &quot;http://graph2&quot; part of the GraphSet?&lt;/b&gt;&lt;BR&gt;'; <br>
                  var_dump($graphset-&gt;containsNamedGraph('http://graph2')); <br>
                  echo'&lt;p/&gt;'; </p>
                <p>//creat basic statement <br>
                  $statement=new Statement(new Resource('http://subject4'),new Resource('http://predicate4'),new Resource('http://object4')); </p>
                <p>//get a Graph from the Set and add a basic statement <br>
                  $graph4=&amp;$graphset-&gt;getNamedGraph('http://graph4'); <br>
                  $graph4-&gt;add($statement); </p>
                <p>//remove Quad5 <br>
                  $graphset-&gt;removeQuad($quad5); </p>
                <p>//get an iterator over all Quads <br>
                  echo '&lt;p/&gt;&lt;b&gt;All Quads:&lt;/b&gt;&lt;BR&gt;'; <br>
                  for($iterator = $graphset-&gt;findInNamedGraphs(null,null,null,null); $iterator-&gt;valid(); $iterator-&gt;next()) <br>
                  { <br>
                  &nbsp;&nbsp;&nbsp;$quad=$iterator-&gt;current(); <br>
                  &nbsp;&nbsp;&nbsp;echo $quad-&gt;toString().'&lt;BR&gt;'; <br>
                  }; </p>
                <p>//get an iterator over all Quads in 'http://graph3' <br>
                  echo '&lt;p/&gt;&lt;b&gt;All Quads in http://graph3:&lt;/b&gt;&lt;BR&gt;'; <br>
                  for($iterator = $graphset-&gt;findInNamedGraphs(new resource('http://graph3'),null,null,null); $iterator-&gt;valid(); $iterator-&gt;next()) <br>
                  { <br>
                  &nbsp;&nbsp;&nbsp;$quad=$iterator-&gt;current(); <br>
                  &nbsp;&nbsp;&nbsp;echo $quad-&gt;toString().'&lt;BR&gt;'; <br>
                  }; </p>
                <p>//how many Quads are in the whole GraphSet <br>
                  echo '&lt;p/&gt;&lt;b&gt;How many Quads are in the whole GraphSet?&lt;/b&gt;&lt;BR&gt;'; <br>
                  echo $graphset-&gt;countQuads(); </p>
                <p>//does the GraphSet contain the Quad (http://graph4, http://subject4, http://predicate4, http://object4) ? <br>
                  echo '&lt;p/&gt;&lt;b&gt;Does the GraphSet contain the Quad (http://graph4, http://subject4, http://predicate4, http://object4) ?&lt;/b&gt;&lt;BR&gt;'; <br>
                  var_dump($graphset-&gt;containsQuad(new Resource('http://graph4'),new Resource('http://subject4'),new Resource('http://predicate4'),new Resource('http://object4'))); <br>
            </p>
                <p>// run a sparql query against the dataset wich fetches all statements from &lt;http://graph4&gt;<br>
                $sparqlQuery = "SELECT * FROM NAMED &lt;http://graph4&gt; WHERE {?s ?p ?o} &quot;;<br>
                $result = $graphset->sparqlQuery($sparqlQuery);</p>
                <p>// print the results as html table <br>
                  echo '&lt;p/&gt;&lt;b&gt;Result of the sparql query: &quot;SELECT * FROM NAMED &amp;lt;http://graph4&amp;gt; WHERE {?s ?p ?o}&quot; &lt;/b&gt;&lt;BR&gt;';                <br>
                  SparqlEngine::writeQueryResultAsHtmlTable($result);</p>
                <p>?&gt; </p></td>
          </tr>
          <tr>
            <td bgcolor="#e7e7ef">&nbsp;</td>
          </tr>
        </table></td>
    </tr>
  </tbody>
</table>
<p>&nbsp;</p>
<h3>2.2 


 Using Database Persistence</h3>
<table width="100%" border="1" cellpadding="3" cellspacing="0">
  <tbody>
    <tr valign="top"> 
      <td bgcolor="#e7e7ef"> <p>&lt;?php<br>
        // Include RAP<br>
        define(&quot;RDFAPI_INCLUDE_DIR&quot;, &quot;./../api/&quot;);<br>
        include(RDFAPI_INCLUDE_DIR . &quot;RdfAPI.php&quot;);<br>
        <br>
        //Get a DbStore from the modelFactory<br>
        $dbstore=ModelFactory::getDbStore('MySql','localhost','rap','root','');<br>
        <br>
        //create the needed tables in the database, if they aren't already set up. <br>
        if (!$dbstore-&gt;isSetup('MySQL'))<br>
&nbsp;&nbsp;&nbsp;$dbstore-&gt;createTables('MySql');<br>
          <br>
      //create a new dataset, if the dataset was not found <br>
$dataset1=&amp; $dbstore-&gt;getDatasetDb('Dataset1');<br>
          if ($dataset1 === false)<br>
&nbsp;&nbsp;&nbsp;$dataset1=&amp; $dbstore-&gt;getNewDatasetDb(''Dataset1'');<br>
      <br>
      //create a new namedGraph in the dataset. <br>
$namedGraph1=&amp; $dataset1-&gt;createGraph('http://rap/NamedGraph1');<br>
      <br>
      //add a statement to the namedGraph
      <br>
      $namedGraph1-&gt;add(new Statement(new Resource('http://rap/ng1_res1'),new Resource('http://rap/ng1_res2'),new Resource('http://rap/ng1_res3')));</p>
        <p>//create a Quad<br>
        $quad1= new Quad(new Resource('http://rap/NamedGraph2'),new Resource('http://rap/ng2_res1'),new Resource('http://rap/ng2_res2'),new Resource('http://rap/ng2_res3'));          </p>
        <p>//add the Quad to the dataset (the needed  namedGraph (http://rap/NamedGraph2) is created automatically)<br> 
        $dataset1-&gt;addQuad($quad1);</p>
        <p>//print out all saved statements<br>
          for($iterator = $dataset1-&gt;findInNamedGraphs(null,null,null,null); $iterator-&gt;valid(); $iterator-&gt;next()) <br>
          {<br>
          &nbsp;&nbsp;&nbsp;$currentQuad= $iterator-&gt;current();<br>
&nbsp;&nbsp;&nbsp;echo $currentQuad-&gt;toString().'&lt;BR&gt;';<br>
};<br>
?&gt;</p>
      </td>
    </tr>
  </tbody>
</table>
<p>&nbsp;</p>
</BODY>
</HTML>
