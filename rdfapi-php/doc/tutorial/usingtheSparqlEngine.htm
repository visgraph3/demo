<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Using the SPARQL Engine</title>
    <link rel="stylesheet" href="../phpdoc.css" type="text/css" />
    <META content="text/html; charset=windows-1252" http-equiv=Content-Type>
  </head>
  <body>
<H3>RDF API for PHP </H3>
<h1>Using the SPARQL Engine</h1>
<p>This tutorial is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<br>
<p>Tobias Gauss &lt;<a href="mailto:tobias.gauss@web.de">tobias.gauss@web.de</a>&gt; <br>
  Chris Bizer &lt;<a href="mailto:chris@bizer.de">chris@bizer.de</a>&gt;  <br>
  Christian Weiske &lt;cweiske@cweiske.de&gt; <br>
April 2007</p>
<br>
      <p>SPARQL is a query language for RDF, which is currently being
      standardized by the W3C. This part of the RAP documentation describes
      RAP's SPARQL engine and its usage. For a detailed description of the
      SPARQL query language please refer to <a href="http://www.w3.org/TR/rdf-sparql-query/" target="_blank">W3C SPARQL working draft</a>. RAP's
      SPARQL package allows you to execute SPARQL queries against RDF graphs
      and RDF datasets which may be stored in memory or in a relational
      database. We have also included SPARQL as additional query language into
      RAP's <a href="netapi.html"> NetAPI RDF server</a>, which allows you to query remote RDF
      repositories using <a href="http://www.w3.org/TR/rdf-sparql-protocol/" target="_top">W3C SPARQL
      protocol</a>.</p>
      <p>RAP's SPARQL package requires PHP version 5.1 or higher.</p>
      <h3>Preparation</h3>
        <p>Before you can use the RAP's SPARQL classes, you need to include
        them properly. The best way to do this is adapting the
        <code>config.php</code> file in RAP's
        <code>test/</code> directory: Copy
        <code>config.php.dist</code> to
        <code>config.php</code> and edit it as you need. If
        <code>config.php</code> stays in <code>test/</code>,
        the directories are already setup properly.</p>
        <p>If you want to use RAP's SPARQL Engine on a <a href="database_persistence.htm">DbModel</a> (database
        based Model), you need to change the
        <code>$GLOBALS['dbConf']</code> array. RAP uses <a href="http://adodb.sourceforge.net/">ADODB</a>
        internally, so the <code>type</code> configuration applies to
        ADODB's driver naming scheme.</p>
     <h3>Creating a model</h3>

        <p>SPARQL queries are run against a Model, let it be a
        <a href="database_persistence.htm">DbModel</a> or a
        <a href="usingtheModelAPI.htm">MemModel</a>.</p>
		
        <b>Creating a MemModel from a file</b>

        <p>Loading a memor model from a file is fairly easy:</p>
		<table border=1 cellpadding=3 cellspacing=0 width="100%">
		  <tbody>
		    <tr valign=top>
		      <td bgcolor=#e7e7ef>
        		<code>$employees = ModelFactory::getDefaultModel();<br>
$employees-&gt;load(RDFAPI_INCLUDE_DIR . '../doc/Tutorial/employees.rdf');</code>
		      </td>
		    </tr>
		  </tbody>
	    </table>
		<br>
        <b>Creating a DbModel</b>

          <p>To get a database model, you first need to get a database
          instance and aquire the model from it:</p>
          <table border="1" cellpadding="3" cellspacing="0" width="100%">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code>$database = ModelFactory::getDbStore(<br>
				      &nbsp;&nbsp; $GLOBALS['dbConf']['type'],<br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['host'],<br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['database'], <br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['user'], <br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['password']<br>
							);<br><br>
					  		$strModel = "http://xmlns.com/foaf/0.1/";<br>
							$dbModel  = $database-&gt;getModel($strModel);<br>
							<br>
							if ($dbModel === false) {<br>
							&nbsp;&nbsp; die('Database does not have a model ' . $strModel . "\n");<br>
							}
				  </code></td>
              </tr>
            </tbody>
          </table>
         
<br>
    <h3>Usage</h3>

        <p>The usage of the SPARQL engine is very similar to the RDQL engine. A sparql query can be executed against an <a href="usingNamedGraphs.htm">RDF dataset,</a> a <a href="usingtheModelAPI.htm">MemModel</a> or <a href="database_persistence.htm">DbModel</a>. The necessary parts of the SPARQL package are loaded automatically when needed. </p>
        <p>The usage is very simple:</p>
        <table border="1" cellpadding="3" cellspacing="0" width="100%">
          <tbody>
            <tr valign="top">
              <td bgcolor="#e7e7ef">
                <code> $result = $datasetOrModel-&gt;sparqlQuery($querystring);</code></td>
            </tr>
          </tbody>
        </table>
        <p>This line executes the SPARQL query <code>$querystring</code> against the Dataset or Model <code>$datasetOrModel</code>. The query returns an array <code>$result</code> witch contains the matching variable bindings for the SELECT variables. If you want the result to be returned in the <a href="http://www.w3.org/TR/rdf-sparql-XMLres/">SPARQL Query Results XML Format,</a> simply add an additional <code>'xml'</code> parameter to the function call:</p>
        <table border="1" cellpadding="3" cellspacing="0" width="100%">
          <tbody>
            <tr valign="top">
              <td bgcolor="#e7e7ef">
                <code> $result = $datasetOrModel-&gt;sparqlQuery($querystring,'xml');</code></td>
            </tr>
          </tbody>
        </table>
		<br>
		
     <h3>Result renderers</h3>

        <p>While the default array-based result is good enought most times,
        you may want to get back XML or HTML, or maybe even JSON to forward it
        to an AJAX client that queried your server. RAP's SPARQL engine uses
        the concept of "Renderers" to make it easy to obtain the results in
        the format you need.</p>
        <p>A renderer is a class that implements either
        <code>SparqlEngine_ResultRenderer</code> or
        <code>SparqlEngineDb_ResultRenderer</code> interface,
        depending on which type of query results you want to convert. Since
        Renderers operate directly on raw results (e.g. database rows), they
        need to be written separately for each SPARQL engine.</p>
        <p><code>SparqlEngineDb</code> ships with three
        renderers: The default array object renderer, an XML, and an HTML
        renderer. To use any of them, pass <code>Default</code>,
        <code>XML</code> or <code>HTML</code> as second parameter
        to <code>sparqlQuery</code>. If you omit the second parameter,
        the default renderer is used.</p>
        <p>If you wrote your own renderer, pass either its full class name
        as second parameter to <code>sparqlQuery</code>, or an
        instance of it.</p>


    <h3>Example</h3>

        <p>The initialization for <code>MemModel</code> and
        <code>DbModel</code> differs a bit, but once you have the
        model, both SPARQL engines behave the same.</p>
		
        <p><b>MemModel initialization</b>
  </p>
        <table border="1" cellpadding="3" cellspacing="0" width="100%">
          <tbody>
            <tr valign="top">
              <td bgcolor="#e7e7ef"> 
			  <code>require_once 'C:/Apache/htdocs/rdfapi-php/test/config.php';<br>
			        // Create a new MemModel and load the document<br>
					$employees = ModelFactory::getDefaultModel();<br>
				    $employees-&gt;load(RDFAPI_INCLUDE_DIR . '../doc/Tutorial/employees.rdf');<br>
					<br>
					//continue below
			  </code></td>
            </tr>
          </tbody>
        </table>
        <p>
  
          <b>DbModel initialization</b>
  </p>
        <table border="1" cellpadding="3" cellspacing="0" width="100%">
          <tbody>
            <tr valign="top">
              <td bgcolor="#e7e7ef"> 
			    <code>require_once '/var/www/rap/rdfapi-php/test/config.php';<br><br>
				      $database = ModelFactory::getDbStore(<br>
				      &nbsp;&nbsp; $GLOBALS['dbConf']['type'],<br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['host'],<br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['database'], <br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['user'], <br>
					  &nbsp;&nbsp; $GLOBALS['dbConf']['password']<br>
							);<br><br>
					  $strModel = "http://xmlns.com/foaf/0.1/";<br>
					  $dbModel  = $database-&gt;getModel($strModel);<br>
					  <br>
					  if ($dbModel === false) {<br>
					  &nbsp;&nbsp; die('Database does not have a model ' . $strModel . "\n");<br>
					  }		
				</code></td>
            </tr>
          </tbody>
        </table>
<br>

       <b>Querying data</b>

          <p>Once the model has been created, we can perform our first query which will be: "<i>Find the full name of all employees</i>". So, we create a variable <code>$querystring</code> and assign the corresponding query string:</p>
          <table border="1" cellpadding="3" cellspacing="0" width="100%" dwcopytype="CopyTableRow">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code> $querystring = '<br />
                    PREFIX vcard &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;<br />
          SELECT ?fullName <br />
          WHERE { ?x vcard:FN ?fullName }'; </code></td>
              </tr>
            </tbody>
          </table>
          <p>To execute the query, we call the method <code>sparqlQuery()</code> on the <code>MemModel</code> and pass the variable holding the query string as parameter:</p>
          <table border="1" cellpadding="3" cellspacing="0" width="100%" dwcopytype="CopyTableRow">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code> $result = $employees->sparqlQuery($querystring); </code></td>
              </tr>
            </tbody>
          </table>
          <p>The result of the query is a two dimension array of variable bindings (<code>$result[]['?varname']</code>). The values of these variables are RAP objects (<code>Resource</code>, <code>Literal</code>, or <code>BlankNode</code>) or an empty string if the variable is unbound . The following code loops over the result set and prints out all bindings of the variable <code>?fullName</code>.</p>
          <table border="1" cellpadding="3" cellspacing="0" width="100%">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code> foreach($result as $line){<br />
&nbsp;&nbsp;$value = $line['?fullName'];<br />
&nbsp;&nbsp;&nbsp;&nbsp;if($value != &quot;&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo $value-&gt;toString().&quot;&lt;br/&gt;&quot;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;else<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;undbound&lt;br/&gt;&quot;;<br />
          }</code></td>
              </tr>
            </tbody>
          </table>
          <p>Another, even more convenient way to display the results of a
          query in a browser is to use the HTML result renderer. All we have
          to do is to pass '<code>HTML</code>' as second parameter to
          <code>sparqlQuery()</code>:</p>
		  
          <table border="1" cellpadding="3" cellspacing="0" width="100%">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code>echo $employees-&gt;sparqlQuery($querystring, 'HTML');</code></td>
              </tr>
            </tbody>
          </table>

          <p>Which will result in the following output in the browser
          window:</p>
          
  <table border='1' cellpadding='3' cellspacing='0'>
              <tr>
                <td><b>No.</b></td>
                <td align='center'><b>?fullName</b></td>
              </tr>
              <tr>
                <td width='20' align='right'>1.</td>
                <td bgcolor="#E7E7EF"><p>Literal: Bill Parker</p></td>
              </tr>
              <tr>
                <td width='20' align='right'>2.</td>
                <td bgcolor="#E7E7EF"><p>Literal: George Simpson</p></td>
              </tr>
              <tr>
                <td width='20' align='right'>3.</td>
                <td bgcolor="#E7E7EF"><p>Literal: Monica Murphy</p></td>
              </tr>
  </table>


          <p>If we want the engine to return the query result in <a href="http://www.w3.org/TR/rdf-sparql-XMLres/">SPARQL Query Results XML Format</a>, we have to add <code>'xml'</code> as second parameter to the function call:</p>
<table border="1" cellpadding="3" cellspacing="0" width="100%" dwcopytype="CopyTableRow">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code> $result2 = $employees->sparqlQuery($querystring, 'xml'); </code></td>
              </tr>
            </tbody>
          </table>
          <p>Now the variable <code>$result2</code> contains a string which represents the results in <a href="http://www.w3.org/TR/rdf-sparql-XMLres/">SPARQL Query Results XML Format</a>:</p>
          <table width="100%" border="1" cellpadding="10" cellspacing="0">
            <tbody>
              <tr valign="top">
                <td><code>&lt;?xml version=&quot;1.0&quot;?&gt;<br />
&lt;sparql xmlns=&quot;http://www.w3.org/2005/sparql-results#&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;head&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;variable name=&quot;fullName&quot;/&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;/head&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;results ordered=&quot;false&quot; distinct=&quot;false&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;result&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;binding name=&quot;fullName&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;literal&gt;Bill Parker&lt;/literal&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/binding&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/result&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;result&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;binding name=&quot;fullName&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;literal&gt;George Simpson&lt;/literal&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/binding&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/result&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;result&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;binding name=&quot;fullName&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;literal&gt;Monica Murphy&lt;/literal&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/binding&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/result&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;/results&gt;<br />
&lt;/sparql&gt;</code></td>
              </tr>
            </tbody>
          </table>
          <p>The result of an <code>ASK</code> query is a boolean value, <code>COUNT</code> returns an integer. </p>
          <p>The result of a <code>CONSTRUCT</code> query is a <a href="usingtheModelAPI.htm">MemModel</a>:</p>
          <table border="1" cellpadding="3" cellspacing="0" width="100%">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code> $querystring = '<br />
                    PREFIX vcard &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;<br />
          PREFIX rdf &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;<br />
          <br />
          CONSTRUCT { ?x vcard:FN ?fullName} <br />
          WHERE { ?x vcard:FN ?fullName }';<br /><br /> 
                  echo $employees-&gt;sparqlQuery($querystring, 'HTML');</code>
                </td>
              </tr>
            </tbody>
          </table>
          <p>A <code>DESCRIBE</code> query also returns a <code>MemModel</code>. Which properties are included into the description can be specified in constants.php:</p>
          <table width="100%" border="1" cellpadding="3" cellspacing="0">
            <tbody>
              <tr valign="top">
                <td bgcolor="#e7e7ef">
                  <code> $sparql_describe = array(<br />
          &nbsp;&nbsp;FOAF_NS.'Person' =&gt; array(FOAF_NS.'name',FOAF_NS.'homepage',FOAF_NS.'mbox')<br />
          );</code></td>
              </tr>
            </tbody>
          </table>
          <p>Meaning that descriptions of instances of foaf:Person will contain the person's name, homepage and mailbox. </p>
          <p> For more SPARQL query examples please refer to the <a href="http://www.w3.org/TR/rdf-sparql-query/" target="_blank">W3C SPARQL Working Draft</a>. </p>
		  <br />
  </body>
</html>
