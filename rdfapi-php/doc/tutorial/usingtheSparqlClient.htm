<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Using the SPARQL Client</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<LINK href="../phpdoc.css" rel=stylesheet type=text/css>
<style type="text/css">
<!--
.Stil1 {color: #FF0000}
-->
</style>
</HEAD>
<BODY bgcolor="#FFFFFF">

<H3>RDF API for PHP </H3>
<h1>Using the SPARQL Client </h1>
<p>This 


 tutorial

is part of the <a href="../tests.html">RAP - Rdf API for PHP</a> documentation.</p>
<p>Tobias Gauss &lt;<a href="mailto:tobias.gauss@web.de">tobias.gauss@web.de</a>&gt;, Chris Bizer  &lt;<a href="mailto:chris@bizer.de">chris@bizer.de</a>&gt;<br>
  June 2006</p>
<p><br>
RAP's SPARQL client allows you to execute <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL queries</a> against remote SPARQL endpoints using the <a href="http://www.w3.org/TR/rdf-sparql-protocol/">SPARQL protocol</a>. Query results are returned as array of variable bindings, RAP MemModel or boolean, depending on the type of SPARQL query. </p>
<h3>Using the SPARQL Client </h3>
 
<p>The SPARQL client 


 package

consists of two classes: SparqlClient which represents a connection to a SPARQL endpoint, and ClientQuery which represents a SPARQL query. </p>
<p>A SparqlClient  is created using RAP's ModelFactory:</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef>
      <p><code> $client = ModelFactory::getSparqlClient(&quot;http://www.exampleSparqlService.net:2020/example&quot;);</code></p></td>
    </tr>
  </tbody>
</table>
<p>This line creates a new SparqlClient object <code>$client</code> for executing queries against the SPARQL endpoint <code>http://www.exampleSparqlService.net:2020/example</code>.</p>
<p>Then we create a ClientQuery object:</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef>
      <p><code> $query = new ClientQuery();</code></p></td>
    </tr>
  </tbody>
</table>
<p>The ClientQuery object has three methods:</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef>
        <p><code> $query-&gt;query($queryString);</code></p></td>
    </tr>
  </tbody>
</table>
<p>sets the  query string of the ClientQuery object.</p>
<p>If the query string doesn't specify the data set to be queried and if the endpoint supports querying custom data sets, you can use following two methods to define the data set to be queried:</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef>
      <p><code> $query-&gt;addDefaultGraph($default);</code></p></td>
    </tr>
  </tbody>
</table>
<p>sets the default graph of the data set to be queried.</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef><p><code>$query-&gt;addNamedGraph($named);</code></p></td>
    </tr>
  </tbody>
</table>
<p>adds a named graph the data set to be queried. </p>
<p>A query is executed  by calling the query() method of the client object:</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef>
        <p><code> $result = $client-&gt;query($query);</code></p></td>
    </tr>
  </tbody>
</table>
<p>The type of the variable $result depends on the SPARQL query. For SELECT queries, the result  is an two dimension array of variable bindings ($result[]['?varname'] ). The values of these variables are RAP objects (<code>Resource</code>, <code>Literal</code> or <code>BlankNode</code>) or an empty string if the variable is unbound. The result of a CONSTRUCT query is a RAP MemModel. The result of a ASK query a variable of the type boolean. </p>
<p> You can also retrieve the query result  in the <a href="http://www.w3.org/TR/rdf-sparql-XMLres/">SPARQL Query Results XML Format </a>by calling the method setOutputFormat() before executing a query.</p>
<table border=1 cellpadding=3 cellspacing=0 width="100%">
  <tbody>
    <tr valign=top>
      <td bgcolor=#e7e7ef>
      <p><code> $client-&gt;setOutputFormat(&quot;xml&quot;);</code></p></td>
    </tr>
  </tbody>
</table>
<h3><br>
Usage Example</h3>
<p> We  start with including the RAP toolkit and creating a SPARQL client linked to a SPARQL endpoint:</p>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
          // Include all RAP classes <br>
	define("RDFAPI_INCLUDE_DIR", "C:/Apache/htdocs/rdfapi-php/api/"); <br>
	include(RDFAPI_INCLUDE_DIR . "RdfAPI.php"); <br>
        <br>
	// Create a SPARQL client </code><code><br>
$client = ModelFactory::getSparqlClient(&quot;http://www.exampleSparqlService.net:2020/example&quot;);
	  </code></p>
    </td></tr></tbody></table>
 
 <p>Once the client has been created, we can perform our first query which will be: "<i>Find the full name of all employees</i>". 
We create a <code>$querystring</code> containing the corresponding SPARQL query:</p>
 
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef>    <p><code>
	$querystring = '<br>
    </code><code>PREFIX vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;<br>
		SELECT ?fullName <br>
        WHERE { ?x vcard:FN ?fullName }'; </code></p>
    </td></tr></tbody></table>
 
 <p>To execute the query, we  create a new ClientQuery object and pass it to the SPARQL client:</p>

 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	$query = new ClientQuery();<br>
	<code>$query-&gt;query($querystring);<br>
	$result = $client-&gt;query($query);</code></code></p>
    </td></tr></tbody></table>
  
 <p> The following code loops over the result set and prints out all  bindings of the variable <code>?fullName</code>.</p>
 <table border=1 cellpadding=3 cellspacing=0 width="100%">
   <tbody>
     <tr valign=top>
       <td bgcolor=#e7e7ef>
         <p><code> 
         foreach($result as $line){<br>
&nbsp;&nbsp;$value = $line['?fullName'];<br>
&nbsp;&nbsp;&nbsp;&nbsp;if($value != &quot;&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo $value-&gt;toString().&quot;&lt;br&gt;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo &quot;undbound&lt;br&gt;&quot;;<br>
}</code></p>       </td>
     </tr>
   </tbody>
 </table>
 <p>Another, even more convenient way to display the results of a query is to use the  <code>writeQueryResultAsHtmlTable()</code> method of the SPARQL engine. All we have to do is to pass the query result to this method:</p>
 <table border=1 cellpadding=3 cellspacing=0 width="100%" dwcopytype="CopyTableRow"> 
 <tbody><tr valign=top><td bgcolor=#e7e7ef> 
    <p><code>
	SPARQLEngine::writeQueryResultAsHtmlTable($result);
   </code></p>
 </td></tr></tbody></table>
 
 <p>Which will result in the following output in the browser window:</p>
 
 <table border='1' cellpadding='3' cellspacing='0'>
   <tr>
     <td><b>No.</b></td>
     <td align='center'><b>?fullName</b></td>
   </tr>
    <tr>
     <td width='20' align='right'>1.</td>      
     <td bgcolor="#E7E7EF"><p>Literal: Bill Parker</p></td>
    </tr>
    <tr>
     <td width='20' align='right'>2.</td>      
     <td bgcolor="#E7E7EF"><p>Literal: George Simpson</p></td>
    </tr>
   
    <tr>
     <td width='20' align='right'>3.</td>      
     <td bgcolor="#E7E7EF"><p>Literal: Monica Murphy</p></td>
    </tr>
</table>
 
 <p>For more SPARQL query examples please refer to the <a href="http://www.w3.org/TR/rdf-sparql-query/" target="_blank">W3C SPARQL specification</a>. </p>
</BODY>
</HTML>
